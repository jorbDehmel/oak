/*
Panic function for Oak
Jordan Dehmel, 2023-
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

// The underlying function used to cause a kernel panic. This
// should probably not be used by the user.
let internal_panic() -> void
{
    raw_c!(
        "exit(1);"
    );
}

// Cause a kernel panic with the given message(s).
let panic!(argc: i32, argv: [][]i8) -> i32
{
    // Include needed files
    include!(
        "std/io.oak",
        "std/atom_math.oak"
    );

    // Print an opening line
    print(
        "print(\"~~~~~~~~~~~~~~~~~~~~~~"
        "~~~~~~~~~~~~~~~~~~\\n\");\n"
    );

    // Print some details about where the panic came from
    print("print(\"Panic: \");\n");
    print("print(file!);\n");
    print("print(\":\");\n");
    print("print(line!);\n");

    // If a message was provided, print that
    if (argc == 2i32)
    {
        print("print(\"\\n");
        print(ptrarr!(argv, 1i32));
        print("\");\n");
    }

    // Print a closing line
    print(
        "print(\"\\n~~~~~~~~~~~~~~~~~~~"
        "~~~~~~~~~~~~~~~~~~~~~\\n\");\n"
    );

    // Call a kernel panic
    print("internal_panic();\n");

    0i32
}

// If the first value is false, cause a kernel panic with any
// messages which are passed after.
let assert!(argc: i32, argv: [][]i8) -> i32
{
    include!(
        "std/io.oak",
        "std/atom_math.oak"
    );

    let out: i32;
    out = 1i32;

    if (argc == 2i32)
    {
        print("if (!(");
        print(ptrarr!(argv, 1i32));
        print(")) { panic!(\"");
        print(ptrarr!(argv, 1i32));
        print("\"); }\n");

        out = 0i32;
    }
    else if (argc == 3i32)
    {
        print("if (!(");
        print(ptrarr!(argv, 1i32));
        print(")) { panic!(\"");
        print(ptrarr!(argv, 2i32));
        print("\"); }\n");

        out = 0i32;
    }

    out
}
