// A test of array access [] in Oak.
// Passed Aug 3, 23

package!("std");
use_rule!("access");
use_rule!("std");

let wrapper: struct
{
    data: []i32,
}

let New(self: ^wrapper) -> void
{
    alloc!(self.data, to_u128(10));
}

let Del(self: ^wrapper) -> void
{
    free!(self.data);
}

let Get(self: ^wrapper, index: u128) -> ^i32
{
    ptrarr!(@self.data, index)
}

let Get(self: ^wrapper, index: i32) -> ^i32
{
    Get(self, to_u128(index))
}

let main() -> i32
{
    let test: wrapper;

    let i: i32 = 0;
    while i < 10
    {
        test[i] = i;
        i += 1;
    }

    i = 0;
    while i < 10
    {
        print(test[i]);
        print("\n");

        i += 1;
    }

    0
}
