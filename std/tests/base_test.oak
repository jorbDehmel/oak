/*
Tests non-decimal bases and other numeric fanciness in Oak int
literals. These are mostly implemented in the lexer during the
conglomeration pass, but also must be seen as valid by the
sequencer's literal recognizer.

Jordan Dehmel, 2023
jdehmel@outlook.com
*/

package!("std");
include!("std/printf.oak");

let main() -> i32
{
    let i: u8;
    let j: u32;

    // Binary
    i = 0b1111 0000;

    j = 0b1010 1010 1010 1010
          1010 1010 1010 1010;

    printf!("i: %\nj: %\n\n", to_i32(i), j);

    // Hex
    i = 0xAB;
    j = 0x01 23 45 67;

    printf!("i: %\nj: %\n\n", to_i32(i), j);

    // Separation for easier numbers
    i = 0b 1111 1111;

    printf!("i: %\n\n", to_i32(i));

    i = 0b1111 1111;

    printf!("i: %\n\n", to_i32(i));

    i = 0b 11111111;

    printf!("i: %\n\n", to_i32(i));

    j = 123 456 i32;

    printf!("j: %\n\n", j);

    print(
        "This demonstrates the merging of "
        "successive string literals, perhaps even "
        "over multiple lines.\n\n"
    );

    0i32
}
