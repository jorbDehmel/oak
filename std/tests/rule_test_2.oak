// Test for new rule symbols as of Aug 3, 23
// Jordan Dehmel
// Passed Aug 3, 23

package!("std");

new_rule!("auto_if_paren", "if $*a {", "if ( $a ) {");
new_rule!("auto_while_paren", "while $*a {", "while ( $a ) {");
bundle_rule!("paren", "auto_if_paren", "auto_while_paren");

use_rule!("paren");

new_rule!("cast", "( $a ) ( $*b )", "to_ $< $a ( $b )");
use_rule!("cast");

new_rule!("for",
    "for ( $*a ; $*b ; $*c ) { $*d }",
    "{ $a ; while ( $b ) { $d $c ; } }");
use_rule!("for");

new_rule!("def_init", "let $a : $b = ", "let $a : $b ; $a = ");
use_rule!("def_init");

let main() -> i32
{
    if true
    {
        print("This should print.\n");
    }
    else
    {
        print("This should not.\n");
    }

    for (let i: i32 = 0; i < 10; i += 1)
    {
        print(i);
        print("\n");
    }

    0
}
