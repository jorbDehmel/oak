/*
Tests the clause keywords
(where, does, is, has, needs, implies) in std Oak.

Jordan Dehmel, 2024
jdehmel@outlook.com
*/

package!("std");
use_rule!("std");

////////////////////////////////////////////////////////////////
// generic definitions

let b<t>(what: ^t) -> void
{
    print("Hello from b!\n");
}

let f<t>(what: ^t) -> void
{
    print("Hello from f!\n");
}

////////////////////////////////////////////////////////////////
// trait definitions

let a<t>: trait
{
    where t does b(_: ^t);
    where t has c;
}

let d<t>: trait
{
    where t is a;
    where t has e;
}
implies
{
    where t does f(_: ^t);
}

////////////////////////////////////////////////////////////////
// struct definitions

// foo_struct satisfies a
let foo_struct: struct
{
    c: i32,
}

// bar_struct satisfies a and d
let bar_struct: struct
{
    c: i32,
    e: f64,
}

////////////////////////////////////////////////////////////////
// Main fn

let main() -> i32
{
    where foo_struct is a;
    where bar_struct is a;
    where bar_struct is d;

    let foo: foo_struct;
    let bar: bar_struct;

    foo.b();
    bar.b();

    bar.f();

    0i32
}
