// For testing Oak's generic structs

package!("std");
use_rule!("std");

// Linked list node
let node<t>: struct
{
    data: t,
    next: ^node<t>,
    has_next: bool,
}

let New<t>(self: ^node<t>) -> void
{
    self.has_next = false;
}

let AddEq<t>(self: ^node<t>, data: t) -> void
{
    alloc!(self.next);
    self.next.data = data;
    self.has_next = true;
}

let Del<t>(self: ^node<t>) -> void
{
    if (self.has_next)
    {
        free!(self.next);
    }
}

let main() -> i32
{
    node<i32>;

    AddEq<i32>(self: ^node<i32>, data: i32);
    Del<i32>(self: ^node<i32>);

    // Create a node
    let head: node<i32>;
    head.data = 123i32;

    print(head.data);

    Del(@head);

    0i32
}
