package!("std");
use_rule!("std");

// Simple generic "pair" class
let pair<l, r>: struct
{
    first: l,
    second: r,
}
post
{
    New<l, r>(self: ^pair<l, r>);
    Copy<l, r>(self: ^pair<l, r>, first: l, second: r);
    Copy<l, r>(self: ^pair<l, r>, other: pair<l, r>);
    make_pair<l, r>(first: l, second: r);
}

let New<l, r>(self: ^pair<l, r>) -> void
{
    New(@self.first);
    New(@self.second);
}

let Copy<l, r>(self: ^pair<l, r>, first: l, second: r
    ) -> pair<l, r>
{
    self.first = first;
    self.second = second;
    ^self
}

let Copy<l, r>(self: ^pair<l, r>, other: pair<l, r>
    ) -> pair<l, r>
{
    self.first = other.first;
    self.second = other.second;
    ^self
}

let make_pair<l, r>(first: l, second: r) -> pair<l, r>
{
    let out: pair<l, r>;

    out.first = first;
    out.second = second;

    out
}

let main() -> i32
{
    let inst: pair<i32, i32>;

    inst = make_pair(123, 456);

    print(inst.first);
    print("\n");
    print(inst.second);
    print("\n");

    inst = (789, 123);

    print(inst.first);
    print("\n");
    print(inst.second);
    print("\n");

    0
}
