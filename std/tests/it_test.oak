/*
Tests a basic iterator in Oak.
*/

package!("std");
use_rule!("std");
include!("std/printf.oak");

/*
This trait is true for the given types `on, iterator` if an only
if `iterator` is a type which defines iterator functions over
`on`.
*/
let iterable<on, iterator>: trait
{
    // Returns a beginning iterator
    where on does begin(_: ^on);

    // Returns whether the iteration is done or not (bool)
    where on does end(_: ^on, _: ^iterator);

    // Advances the iterator by one forward
    where iterator does Incr(_: ^iterator);

    // Fetches a reference to the current object
    where iterator does get(_: ^iterator);
}

// WIP
let iterable<on>: trait
{
    where on does begin(_: ^on);

    let __obj: on;

    where type!(begin(__obj)) does
        Incr(_: ^type!(begin(__obj)));
    where type!(begin(__obj)) does get(_: ^type!(begin(__obj)));
    where on does end(_: ^on, _: ^type!(begin(__obj)));
}

let a: struct { data: [10]i32, }
let a_iterator: struct { on: ^a, pos: u128, }

let Copy(self: ^a_iterator, from: a_iterator) -> a_iterator
{
    ptrcpy!(self.on, from.on);
    self.pos = from.pos;
    ^self
}

let begin(self: ^a) -> a_iterator
{
    let out: a_iterator;
    ptrcpy!(out.on, self);
    out.pos = 0;

    out
}

let end(self: ^a, iter: ^a_iterator) -> bool { iter.pos >= 10 }
let Incr(self: ^a_iterator) -> void { ++self.pos; }
let get(self: ^a_iterator) -> ^i32
{
    @ptrarr!(self.on.data, self.pos)
}

new_rule!(
    "foreach",
    "for $~ $$ $>a in $~ $$ $>b $~ $<${$}$> $>c ",
    "{ "
        "let oakc::__iter = $b . begin ( ) ; "
        "while ( ! end ( $b , oakc::__iter ) ) { "
        "let $a : ^ i32 ; "
        "ptrcpy! ( $a , get ( oakc::__iter ) ) ; "
        "{ $c } ++ oakc::__iter ; } "
    "}"
);
use_rule!("foreach");

let main() -> i32
{
    let what: a;
    iterable<a, a_iterator>;
    // iterable<a>;
    let i: u128 = 0;

    for item in what
    {
        printf!("Item %\n", i);
        ++i;
    }

    0
}
