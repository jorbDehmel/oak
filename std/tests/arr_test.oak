// Another Oak generic test, this time using an array datatype
// Passed 9/22/23

package!("std");
use_rule!("std");

include!("std/opt.oak");
include!("std/printf.oak");

let arr<t>: struct
{
    size: u128,
    data: []t,
}
pre
{
    opt<^t>;
}
post
{
    New<t>(self: ^arr<t>);
    Del<t>(self: ^arr<t>);
    Copy<t>(self: ^arr<t>, size: u128);
    Get<t>(self: ^arr<t>, index: u128);
}

let New<t>(self: ^arr<t>) -> void
{
    self.size = 0u128;
}

let Del<t>(self: ^arr<t>) -> void
{
    if self.size != 0u128
    {
        free!(self.data);
    }
}

let Copy<t>(self: ^arr<t>, size: u128) -> arr<t>
{
    if self.size != 0u128
    {
        free!(self.data);
    }

    self.size = size;
    alloc!(self.data, size);

    ^self
}

let Get<t>(self: ^arr<t>, index: u128) -> opt<^t>
{
    let out: opt<^t>;

    if index < self.size
    {
        out.wrap_some(ptrarr!(self.data, index));
    }
    else
    {
        out.wrap_none();
    }

    out
}

let main() -> i32
{
    let a: arr<i32>;
    a = 5u128;

    let result: opt<^i32>;
    result = a.Get(1u128);
    match (result)
    {
        case some(data)
        {
            data = 5i32;
        }
    }

    result = a.Get(1u128);
    match (result)
    {
        case some(data)
        {
            print(^^data);
        }

        default
        {
        }
    }

    print("\n");

    0i32
}
