/*
Jordan Dehmel, 2023 - present
jdehmel@outlook.com, GPLv3

Function signatures for ALL the int and float
operators for the Oak programming language.
Abandon all hope, ye who enter here. Only
esoterica and repetition await you. As far as
I know, this is the most efficient way to
represent these signatures, exploiting plural
definitions in functions.
*/

link!("std/math_int_inter.o");
link!("std/math_float_inter.o");

// u8
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: u8, other: u8) -> u8;
let Eq, Neq, Less, Great, Leq, Greq
    (self: u8, other: u8) -> bool;
let New(self: ^u8) -> void;
let Del(self: ^u8) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^u8, other: u8) -> u8;

// u16
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: u16, other: u16) -> u16;
let Eq, Neq, Less, Great, Leq, Greq
    (self: u16, other: u16) -> bool;
let New(self: ^u16) -> void;
let Del(self: ^u16) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^u16, other: u16) -> u16;

// u32
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: u32, other: u32) -> u32;
let Eq, Neq, Less, Great, Leq, Greq
    (self: u32, other: u32) -> bool;
let New(self: ^u32) -> void;
let Del(self: ^u32) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^u32, other: u32) -> u32;

// u64
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: u64, other: u64) -> u64;
let Eq, Neq, Less, Great, Leq, Greq
    (self: u64, other: u64) -> bool;
let New(self: ^u64) -> void;
let Del(self: ^u64) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^u64, other: u64) -> u64;

// u128
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: u128, other: u128) -> u128;
let Eq, Neq, Less, Great, Leq, Greq
    (self: u128, other: u128) -> bool;
let New(self: ^u128) -> void;
let Del(self: ^u128) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^u128, other: u128) -> u128;

// i8
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: i8, other: i8) -> i8;
let Eq, Neq, Less, Great, Leq, Greq
    (self: i8, other: i8) -> bool;
let New(self: ^i8) -> void;
let Del(self: ^i8) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^i8, other: i8) -> i8;

// i16
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: i16, other: i16) -> i16;
let Eq, Neq, Less, Great, Leq, Greq
    (self: i16, other: i16) -> bool;
let New(self: ^i16) -> void;
let Del(self: ^i16) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^i16, other: i16) -> i16;

// i32
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: i32, other: i32) -> i32;
let Eq, Neq, Less, Great, Leq, Greq
    (self: i32, other: i32) -> bool;
let New(self: ^i32) -> void;
let Del(self: ^i32) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^i32, other: i32) -> i32;

// i64
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: i64, other: i64) -> i64;
let Eq, Neq, Less, Great, Leq, Greq
    (self: i64, other: i64) -> bool;
let New(self: ^i64) -> void;
let Del(self: ^i64) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^i64, other: i64) -> i64;

// i128
let Add, Sub, Mult, Div, Mod, And, Or, Lbs, Rbs
    (self: i128, other: i128) -> i128;
let Eq, Neq, Less, Great, Leq, Greq
    (self: i128, other: i128) -> bool;
let New(self: ^i128) -> void;
let Del(self: ^i128) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq, ModEq, AndEq, OrEq
    (self: ^i128, other: i128) -> i128;

// Floats
let Add, Sub, Mult, Div
    (self: f32, other: f32) -> f32;
let Eq, Neq, Less, Great, Leq, Greq
    (self: f32, other: f32) -> bool;
let New(self: ^f32) -> void;
let Del(self: ^f32) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq
    (self: ^f32, other: f32) -> f32;

// Doubles
let Add, Sub, Mult, Div
    (self: f64, other: f64) -> f64;
let Eq, Neq, Less, Great, Leq, Greq
    (self: f64, other: f64) -> bool;
let New(self: ^f64) -> void;
let Del(self: ^f64) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq
    (self: ^f64, other: f64) -> f64;

// Long Doubles
let Add, Sub, Mult, Div
    (self: f128, other: f128) -> f128;
let Eq, Neq, Less, Great, Leq, Greq
    (self: f128, other: f128) -> bool;
let New(self: ^f128) -> void;
let Del(self: ^f128) -> void {}
let Copy, AddEq, SubEq, MultEq, DivEq
    (self: ^f128, other: f128) -> f128;

