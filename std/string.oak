////////////////////////////////////////////////////////////////

/*
A basic self-resizing heap string for Oak. You may also want to
include `std/cstr.oak` and/or `std/string_ops.oak` for some more
functionality.

Jordan Dehmel, 2024
jdehmel@outlook.com
*/

////////////////////////////////////////////////////////////////

// Ensure that this will work with other dialects
tag!("no_dialect");

package!("std");
use_rule!("std");
include!("std/cstr.oak");

// A smart resizing string. This may be referred to as a `std`
// string in other files, as opposed to other implementations of
// string and the `str` literal. This should be null-terminated.
let string: struct
{
    capacity: u128,       // The max value currently storable
    current_length: u128, // The current length of the string
    data: []i8,           // The underlying heap memory
}

////////////////////////////////////////////////////////////////

// This returns a raw pointer into the data. Do not modify.
let c_str(self: ^string) -> str
{
    raw_c!("return self->data;");
}

////////////////////////////////////////////////////////////////

// Create an empty string.
let New(self: ^string) -> void
{
    self.capacity = 0u128;
    self.current_length = 0u128;
    ptrcpy!(self.data, 0u128);
}

// Free whatever memory is currently stored.
let Del(self: ^string) -> void
{
    if self.capacity != 0u128
    {
        free!(self.data);
    }

    self.capacity = 0u128;
    self.current_length = 0u128;
    ptrcpy!(self.data, 0u128);
}

////////////////////////////////////////////////////////////////

// Doubles the current capacity. If 0, sets to 8.
let Expand(self: ^string) -> void
{
    if self.capacity == 0u128
    {
        self.capacity = 8u128;
        alloc!(self.data, self.capacity);
    }
    else
    {
        // Get old data
        let old: []i8;
        ptrcpy!(old, self.data);

        // Allocate new space
        self.capacity *= 2u128;
        alloc!(self.data, self.capacity);

        // Copy over old data
        strcpy(self.data, old);

        // Free old data
        free!(old);
    }
}

// Halves the current capacity.
let Shrink(self: ^string) -> void
{
    if self.capacity > 7u128
    {
        // Get old data
        let old: []i8;
        ptrcpy!(old, self.data);

        // Allocate new space
        self.capacity /= 2u128;
        alloc!(self.data, self.capacity);

        // Copy over old data
        strncpy(self.data, old, self.capacity);

        ptrarr!(self.data, self.capacity - 1u128) = 0i8;

        // Free old data
        free!(old);

        // Find new size
        self.current_length = strlen(self.data);
    }
}

// If needed, expands to the given size. If the current size is
// already equal to or larger than the given one, does nothing.
let reserve(self: ^string, size: u128) -> void
{
    if self.capacity == 0u128
    {
        alloc!(self.data, size);
        self.capacity = size;
    }
    else if size != 0u128 && self.capacity < size
    {
        // Get old data
        let old: []i8;
        ptrcpy!(old, self.data);

        // Allocate new space
        self.capacity = size;
        alloc!(self.data, self.capacity);

        // Copy over old data
        strcpy(self.data, old);

        // Free old data
        free!(old);
    }
}

// Sets the current capacity to 0. Equivalent to Del(self)
let clear(self: ^string) -> void
{
    if self.capacity != 0u128
    {
        free!(self.data);
    }

    self.capacity = 0u128;
    self.current_length = 0u128;
    ptrcpy!(self.data, 0u128);
}

////////////////////////////////////////////////////////////////

// Copy from a string literal.
let Copy(self: ^string, from: str) -> string
{
    self.current_length = strlen(from) + 1u128;

    while self.capacity > 7u128
        && self.capacity > self.current_length * 2u128
    {
        self.Shrink();
    }

    while self.capacity < self.current_length
    {
        self.Expand();
    }

    strncpy(self.data, from, self.current_length);

    ^self
}

// Copy from another string.
let Copy(self: ^string, other: string) -> string
{
    Del(self);

    self.reserve(other.capacity);
    strncpy(self.data, other.data, other.current_length);
    Get(self.data, other.current_length) = 0i8;
    self.current_length = strlen(self.data);

    ^self
}

// Copy from a char array string.
let Copy(self: ^string, other: []i8) -> string
{
    self.current_length = strlen(other) + 1u128;

    while self.capacity > 7u128
        && self.capacity > self.current_length * 2u128
    {
        self.Shrink();
    }
    while self.capacity < self.current_length
    {
        self.Expand();
    }

    strncpy(self.data, other, self.current_length);

    ^self
}

// Append another string onto this.
let AddEq(self: ^string, other: string) -> void
{
    let new_size = self.current_length + other.current_length;

    while self.capacity < new_size
    {
        self.Expand();
    }

    let i = 0u128;
    while self.current_length + i < new_size
    {
        ptrarr!(self.data, self.current_length + i)
            = ptrarr!(other.data, i);
        ++i;
    }

    self.current_length = new_size;
}

// Append another string onto this.
let AddEq(self: ^string, other: str) -> void
{
    let new_size = self.current_length + strlen(other);

    while self.capacity < new_size
    {
        self.Expand();
    }

    let i = 0u128;
    while self.current_length + i < new_size
    {
        ptrarr!(self.data, self.current_length + i)
            = Get(other, i);
        ++i;
    }

    self.current_length = new_size;
}

// Append another string onto this.
let AddEq(self: ^string, other: []i8) -> void
{
    let new_size = self.current_length + strlen(other);

    while self.capacity < new_size
    {
        self.Expand();
    }

    let i = 0u128;
    while self.current_length + i < new_size
    {
        ptrarr!(self.data, self.current_length + i)
            = ptrarr!(other, i);
        ++i;
    }

    self.current_length = new_size;
}

// Append another string onto this.
let AddEq(self: ^string, other: i8) -> void
{
    let new_size = self.current_length + 1u128;

    while self.capacity < new_size
    {
        self.Expand();
    }

    ptrarr!(self.data, self.current_length) = other;

    self.current_length = new_size;
}

// Concat two strings.
let Add(a: string, b: string) -> string
{
    let out: string;
    out.reserve(a.current_length + b.current_length);
    out = a;
    out += b;

    out
}

// Concat two strings.
let Add(a: string, b: str) -> string
{
    let out: string;
    out.reserve(a.current_length + strlen(b));
    out = a;
    out += b;

    out
}

// Concat two strings.
let Add(a: string, b: []i8) -> string
{
    let out: string;
    out.reserve(a.current_length + strlen(b));
    out = a;
    out += b;

    out
}

// Get the byte at the given index.
// NOTE: This may not work properly on Unicode strings!
let Get(self: ^string, index: u128) -> i8
{
    let out: i8;

    if index < self.current_length
    {
        out = ptrarr!(self.data, index);
    }

    out
}

// Set the given character, so long as it is in range.
let set(self: ^string, index: u128, to: i8) -> void
{
    if index < self.current_length
    {
        Get(self.data, index) = to;
    }
}

////////////////////////////////////////////////////////////////

// Uses strcmp to compare two strings.
let Eq(a: string, b: string) -> bool
{
    strcmp(a.data, b.data) == 0u128
}

// Uses strcmp to compare two strings.
let Eq(a: string, b: str) -> bool
{
    strcmp(a.data, b) == 0u128
}

// Uses strcmp to compare two strings.
let Eq(a: string, b: []i8) -> bool
{
    strcmp(a.data, b) == 0u128
}

// Uses strcmp to compare two strings.
let Neq(a: string, b: string) -> bool
{
    !Eq(a, b)
}

// Uses strcmp to compare two strings.
let Neq(a: string, b: str) -> bool
{
    !Eq(a, b)
}

// Uses strcmp to compare two strings.
let Neq(a: string, b: []i8) -> bool
{
    !Eq(a, b)
}

// Returns true if and only if two substrings match.
let is_substring_eq(
    self: ^string,
    what: str,
    start: u128,
    n: u128) -> bool
{
    if start + n > self.current_length
    {
        return false;
    }
    else if n > strlen(what)
    {
        return false;
    }

    let l: []i8;
    ptrcpy!(l, @ptrarr!(self.data, start));
    return strncmp(l, what, n) == 0u128;
}

// Returns true if and only if two substrings match.
let is_substring_eq(
    self: ^string,
    what: []i8,
    start: u128,
    n: u128) -> bool
{
    if start + n > self.current_length
    {
        return false;
    }
    else if n > strlen(what)
    {
        return false;
    }

    let l: []i8;
    ptrcpy!(l, @ptrarr!(self.data, start));
    return strncmp(l, what, n) == 0u128;
}

/*
Returns true if and only if all the characters from
self[my_start] to self[my_start + n] match all that characters
from other[other_start] to other[other_start + n]. If my_start
or my_start + n are larger than self.current_length, returns
false. Similarly, returns false if other_start or
other_start + n is greater than other.current_length.
*/
let is_substring_eq(
    self: ^string,
    other: string,
    my_start: u128,
    other_start: u128,
    n: u128) -> bool
{
    if my_start + n > self.current_length
    {
        return false;
    }
    else if other_start + n > other.current_length
    {
        return false;
    }

    let l, r: []i8;
    ptrcpy!(l, @ptrarr!(self.data,  my_start));
    ptrcpy!(r, @ptrarr!(other.data, other_start));
    return strncmp(l, r, n) == 0u128;
}

////////////////////////////////////////////////////////////////

// Print the contents of the string.
let print(what: string) -> void
{
    print(what.data);
}

/*
Uses DJB2 by Dan Bernstein
http://www.cse.yorku.ca/~oz/hash.html
*/
let hash(self: string) -> u128
{
    let out: u128 = 5 381u128;
    let cur: i8 = 0i8;

    let i = 0u128;
    while i < self.current_length
    {
        cur = ptrarr!(self.data, i);

        out *= 33u128;
        out += cur;

        ++i;
    }

    out
}

// Returns the current length of the string.
let size(self: ^string) -> u128
{
    self.current_length
}

// Returns true if and only if the current length is 0.
let empty(self: ^string) -> bool
{
    self.current_length == 0u128
}

////////////////////////////////////////////////////////////////
