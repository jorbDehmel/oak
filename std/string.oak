/*
Jordan Dehmel, 2023

Basic non-resizing heap string.
*/

package!("std");
use_rule!("std");
link!("std/string.o");

include!("std/conv_extra.oak");

let strlen(what: str) -> u128;

let string: struct
{
    data: []i8,
    size: u128,
}

let New(self: ^string) -> void
{
    self.size = to_u128(0);
}

let Copy(self: ^string, size: u128) -> void
{
    // Clear self if needed
    if (self.size != to_u128(0))
    {
        free!(self.data);
        self.size = to_u128(0);
    }

    self.size = size;
    alloc!(self.data, (self.size + to_u128(1)));
    Copy(ptrarr!(self.data, self.size), 0);
}

let Copy(self: ^string, from: str) -> void
{
    // Clear self if needed
    if (self.size != to_u128(0))
    {
        free!(self.data);
        self.size = to_u128(0);
    }

    // Poll size of from (including null termination)
    let size: u128;
    size = to_u128(0);
    while (Get(@from, size) != to_i8(0))
    {
        size += to_u128(1);
    }

    // Alloc self
    self.size = size;
    alloc!(self.data, (self.size + to_u128(1)));

    // Copy data (including null termination)
    while (size != to_u128(0))
    {
        Copy(ptrarr!(self.data, size), Get(from, size));

        size -= to_u128(1);
    }

    Copy(
        ptrarr!(self.data, to_u128(0)),
        Get(from, to_u128(0))
    );

    Copy(ptrarr!(self.data, self.size), 0);
}

let Del(self: ^string) -> void
{
    if (self.size != to_u128(0))
    {
        free!(self.data);
        self.size = to_u128(0);
    }
}

let clear(self: ^string) -> void
{
    let i: u128;
    i = to_u128(0);

    while (i < self.size)
    {
        Copy(ptrarr!(self.data, i), to_i8(0));

        i += to_u128(1);
    }
}

let Eq(self: string, other: string) -> bool
{
    let out: bool;
    out = true;

    if (self.size != other.size)
    {
        out = false;
    }
    else
    {
        let cur: u128;
        cur = to_u128(0);

        while (cur < self.size)
        {
            if (ptrarr!(self.data, cur) != ptrarr!(self.data, cur))
            {
                out = false;
                cur = self.size;
            }
        }
    }

    out
}

let Neq(self: string, other: string) -> bool
{
    let out: bool;
    out = Eq(self, other);

    if (out)
    {
        out = false;
    }
    else
    {
        out = true;
    }

    out
}

let Get(self: ^string, index: u128) -> ^i8
{
    @ptrarr!(self.data, index)
}

let Copy(self: ^string, from: string) -> void
{
    // Clear self if needed
    if (self.size != to_u128(0))
    {
        free!(self.data);
        self.size = to_u128(0);
    }

    // Alloc self
    self.size = from.size;

    if (self.size != to_u128(0))
    {
        alloc!(self.data, (self.size + to_u128(1)));
        
        // Copy data (including null termination)
        let i: u128;
        i = self.size;
        while (i != to_u128(0))
        {
            Copy(ptrarr!(self.data, i), ^Get(@from, i));

            i -= to_u128(1);
        }
        Copy(
            ptrarr!(self.data, to_u128(0)),
            ^Get(@from, to_u128(0))
        );

        Copy(ptrarr!(self.data, self.size), 0);
    }
}

let Add(a: string, b: string) -> string
{
    let out: string;

    // Accounts for null termination
    let size: u128;
    size = a.size + b.size;

    Copy(@out, size);

    let i: u128;
    i = to_u128(0);

    while (i < a.size)
    {
        Copy(ptrarr!(out.data, i), ptrarr!(a.data, i));

        i += to_u128(1);
    }

    let b_pos: u128;
    b_pos = to_u128(0);

    while (b_pos < b.size)
    {
        Copy(ptrarr!(out.data, i), ptrarr!(b.data, b_pos));

        b_pos += to_u128(1);
        i += to_u128(1);
    }

    out
}

// Extern C function
// This returns a raw pointer into the data.
// Do not modify.
let c_str(self: ^string) -> str;

let Eq(self: ^string, other: str) -> bool
{
    let out: bool = (self.c_str()) == other;
    out
}

let Neq(self: ^string, other: str) -> bool
{
    let out: bool = (self.c_str()) != other;
    out
}

let print(what: string) -> void
{
    print(c_str(@what));
}

let to_i128(what: ^string) -> i128
{
    let out: i128 = 0;
    let is_negative: bool = false;

    if what.size != to_u128(0)
    {
        let i: u128 = 0;
        if ^Get(what, to_u128(0)) == "-"
        {
            is_negative = true;
            i += 1;
        }

        while i < what.size
        {
            out *= to_i128(10);

            if ^Get(what, i) == "1"
            {
                out += 1;
            }
            else if ^Get(what, i) == "2"
            {
                out += 2;   
            }
            else if ^Get(what, i) == "3"
            {
                out += 3;
            }
            else if ^Get(what, i) == "4"
            {
                out += 4;
            }
            else if ^Get(what, i) == "5"
            {
                out += 5;
            }
            else if ^Get(what, i) == "6"
            {
                out += 6;
            }
            else if ^Get(what, i) == "7"
            {
                out += 7;
            }
            else if ^Get(what, i) == "8"
            {
                out += 8;
            }
            else if ^Get(what, i) == "9"
            {
                out += 9;
            }

            i += 1;
        }
    }

    if is_negative
    {
        out *= to_i128(-1);
    }

    out

}

/*
Uses DJB2 by Dan Bernstein
http://www.cse.yorku.ca/~oz/hash.html
*/
let hash(self: ^string) -> u128
{
    let out: u128 = 5 381;
    let cur: i8 = 0;

    let i: u128 = 0;
    while i < self.size
    {
        cur = ptrarr!(self.data, i);

        out *= 33;
        out += cur;

        i += 1;
    }

    if out == to_u128(0)
    {
        out = 1;
    }

    out
}
