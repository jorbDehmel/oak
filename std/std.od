// The standard Oak dialect
// These rules can also be activated via std.oak
// Jordan Dehmel, 2023

// Remove all existing rules
clear

// Rules
"let $~ $$ $>a ( $~ $*/[$)$] $>b ) {"                                           "let $~ $$ $>a ( $~ $$ $>b ) -> void {"
"ptr"                                                                           "^ void"
"if $~ $+/[${$] $>a {"                                                          "if ( $a ) {"
"while $~ $+/[${$] $>a {"                                                       "while ( $a ) {"
"match $~ $+/[${$] $>a {"                                                       "match ( $a ) {"
"let $~ $$ $>a . $~ $$ $>b ("                                                   "let $b ( self : ^ $a ,"
"$/<$let $~ $$ $>a . Get ("                                                     "Get ( @ $a ,"
"let $~ $$ $>a : $~ $$ $>b = "                                                  "let $a : $b ; $a = "
"let $~ $$ $>a = $~ $*/[$;$] $>b ;"                                             "let $a : type! ( $b ) ; $a = $b ;"
"for ( $~ $+/[$;$] $>a ; $~ $*/[$;$] $>b ; $~ $*/[$)$] $>c ) $~ $<${$}$> $>d"   "{ $a ; while ( $b ) { $d $c ; } }"
"trait"                                                                         "struct {} pre"
"where $~ $*/[$is$has$does$;$] $>a does $~ $$ $>b ( $~ $*/[$)$] $>c )"		    "$b < $a > ( $c )"
"where $~ $*/[$is$has$does$;$] $>a is $~ $$ $>b"                                "$b < $a >"
"needs"                                                                         "pre"
"implies"                                                                       "post"

// NOT final, as we want people to build on these
