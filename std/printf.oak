/*
printf.oak
Jordan Dehmel, 2023

Takes a format string and some number of
other things.

Any percentage sign % in the format string
will be replaced by the corresponding thing.
Note that this does not use the C system
of types- a % will print whatever's next
no matter what.

For instance:

```oak
package!("std");
use_rule!("std");

let main() -> i32
{
    let i: i32 = 123;
    let j: f64 = 1.234;

    printf!(
        "Variable i is %, j is %, and some text is '%'.\n",
        i,
        j,
        "some text here"
    );

    0
}

```

```bash
Variable i is 123, j is 1.234, and some text is \
'some text here'.
```

You can escape this behavior for a literal
% via the backslash.

This is not the most efficient implementation,
but it works.
*/

let printf!(argc: i32, argv: [][]i8) -> i32
{
    package!("std");
    use_rule!("std");

    let cur_char: i32 = 0;
    let cur_arg: i32 = 2;

    let is_valid: bool;

    // Iterate through
    while (ptrarr!(ptrarr!(argv, 1), cur_char) != to_i8(0))
    {
        let cur: i8 = ptrarr!(ptrarr!(argv, 1), cur_char);

        if (cur == to_i8("%"))
        {
            if (cur_arg >= argc)
            {
                print("print(\"<MALFORMED PRINTF CALL>\");\n");
            }
            else
            {
                // Formatted print
                print("print(");
                print(ptrarr!(argv, cur_arg));
                print(");\n");

                cur_arg += 1;
            }
        }
        else if (cur == to_i8("\\"))
        {
            // Escape character

            let temp: i32 = cur_char;
            temp += 1;

            if (ptrarr!(ptrarr!(argv, 1), temp) == to_i8(0))
            {
                print("print(\"\\\\\");\n");
            }
            else
            {
                if (ptrarr!(ptrarr!(argv, 1), temp) == to_i8("%"))
                {
                    print("print(\"%\");\n");
                    cur_char += 1;
                }
                else
                {
                    print("print(\"\\");
                    print(ptrarr!(ptrarr!(argv, 1), temp));
                    print("\");\n");
                    cur_char += 1;
                }
            }

            // If next is %, do not print the escape character.
            // Otherwise, do.
        }
        else if (cur != to_i8("\""))
        {
            // Print current character as literal
            print("print(\"");
            print(cur);
            print("\");\n");
        }

        cur_char += 1;
    }

    // Warn if more arguments are provided than are needed
    if (cur_arg < argc)
    {
        print(
            "c::print!(\"Warning: Unused printf! argument(s).\");\n"
        );
    }

    0
}
