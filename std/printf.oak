/*
printf.oak
Jordan Dehmel, 2023

Takes a format string and some number of
other things.
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

/*
Any percentage sign % in the format string will be replaced by
the corresponding thing. Note that this does not use the C
system of types- a % will print whatever's next no matter what.
You can escape this behavior for a literal % via the backslash.
This is compile-time, with no option for runtime modifiable
behavior.
*/
let printf!(argc: i32, argv: [][]i8) -> i32
{
    package!("std");
    use_rule!("std");

    let cur_char: i32 = 0i32;
    let cur_arg: i32 = 2i32;

    let is_valid: bool;

    // Iterate through
    while (ptrarr!(ptrarr!(argv, 1i32), cur_char) != 0i8)
    {
        let cur: i8 = ptrarr!(ptrarr!(argv, 1i8), cur_char);

        if (cur == to_i8("%"))
        {
            if (cur_arg >= argc)
            {
                print("print(\"<MALFORMED PRINTF CALL>\");\n");
            }
            else
            {
                // Formatted print
                print("print(");
                print(ptrarr!(argv, cur_arg));
                print(");\n");

                cur_arg += 1i32;
            }
        }
        else if (cur == to_i8("\\"))
        {
            // Escape character

            let temp: i32 = cur_char;
            temp += 1i32;

            if (ptrarr!(ptrarr!(argv, 1i32), temp) == 0i8)
            {
                print("print(\"\\\\\");\n");
            }
            else
            {
                if (ptrarr!(ptrarr!(argv, 1i32), temp)
                    == to_i8("%"))
                {
                    print("print(\"%\");\n");
                    cur_char += 1i32;
                }
                else
                {
                    print("print(\"\\");
                    print(ptrarr!(ptrarr!(argv, 1i32), temp));
                    print("\");\n");
                    cur_char += 1i32;
                }
            }

            // If next is %, do not print the escape character.
            // Otherwise, do.
        }
        else if (cur != to_i8("\""))
        {
            // Print current character as literal
            print("print(\"");
            print(cur);
            print("\");\n");
        }

        cur_char += 1i32;
    }

    // Warn if more arguments are provided than are needed
    if (cur_arg < argc)
    {
        print(
            "c::print!(\"Warning: Unused printf! "
            "argument(s).\");\n"
        );
    }

    0i32
}
