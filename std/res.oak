/*
The `result` enum. Concept taken from Rust.
Jordan Dehmel, 2023
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

include!("std/unit.oak");

let result<g, b>: enum
{
    ok: g,
    err: b,
    none: unit,
}
post
{
    New<g, b>(self: ^result<g, b>);
    Copy<g, b>(self: ^result<g, b>, other: result<g, b>);
}

let New<g, b>(self: ^result<g, b>) -> void
{
    wrap_none(self);
}

let Copy<g, b>(self: ^result<g, b>, other: result<g, b>
    ) -> result<g, b>
{
    match (other)
    {
        case ok(data)
        {
            wrap_ok(self, ^data);
        }

        case err(data)
        {
            wrap_err(self, ^data);
        }

        case none()
        {
            wrap_none(self);
        }
    }

    other
}
