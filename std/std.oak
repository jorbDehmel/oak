////////////////////////////////////////////////////////////////
// Info

/*
Jordan Dehmel, 2023 - present
Linkage file for the Oak standard (std) package.
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

////////////////////////////////////////////////////////////////
// Linkage

include!(
    "std/io.oak",        // Interface to system I/O
    "std/atom_math.oak", // Interface to C atomic operations
    "std/conv.oak",      // Interface to C type conversions
    "std/unit.oak"       // Provides unit (1-byte) struct
);

////////////////////////////////////////////////////////////////
// Rules

// Void return rule
new_rule!(
    "void_return",
    "let $~ $$ $>a ( $~ $*/[$)$] $>b ) {",
    "let $~ $$ $>a ( $~ $$ $>b ) -> void {"
);

// `ptr` (^void) alias rule
new_rule!(
    "ptr",
    "ptr",
    "^ void"
);

// Auto-parenthesize rules
new_rule!(
    "auto_if_paren",
    "if $~ $+/[${$] $>a {",
    "if ( $a ) {"
);
new_rule!(
    "auto_while_paren",
    "while $~ $+/[${$] $>a {",
    "while ( $a ) {"
);
new_rule!(
    "auto_match_paren",
    "match $~ $+/[${$] $>a {",
    "match ( $a ) {"
);

// Easy method rules
new_rule!(
    "easy_method",
    "let $~ $$ $>a . $~ $$ $>b (",
    "let $b ( self : ^ $a ,"
);
new_rule!(
    "get_method",
    "$/<$let $~ $$ $>a . Get (",
    "Get ( $a ,"
);

// Definition-Instantiation rules
new_rule!(
    "def_init",
    "let $~ $$ $>a : $~ $$ $>b = ",
    "let $a : $b ; $a = "
);
new_rule!(
    "auto_init",
    "let $~ $$ $>a = $~ $*/[$;$] $>b ;",
    "let $a : type! ( $b ) ; $a = $b ;"
);

// For loop rules
new_rule!(
    "for",
    "for ( $~ $+/[$;$] $>a ; $~ $*/[$;$] $>b ; "
        "$~ $*/[$)$] $>c ) $~ $<${$}$> $>d",
    "{ $a ; while ( $b ) { $d $c ; } }"
);

// Trait rule
new_rule!(
    "trait",
    "trait",
    "struct {} pre"
);

// This is instantiable if and only if `a` has a member named
// `b`.
let __has<a, b>() -> void { let __item: a; New(__item.b); }

// Clause rules
new_rule!(
    "does",
    "where $~ $*/[$is$has$does$;$] $>a does $~ $$ $>b "
        "( $~ $*/[$)$] $>c )",
    "$b < $a > ( $c )"
);
new_rule!(
    "is",
    "where $~ $*/[$is$has$does$;$] $>a is $~ $$ $>b",
    "$b < $a >"
);
new_rule!(
    "has",
    "where $~ $*/[$is$has$does$;$] $>a has $~ $$ $>b",
    "__has < $a , $b > ( )"
);
new_rule!(
    "needs",
    "needs",
    "pre"
);
new_rule!(
    "implies",
    "implies",
    "post"
);

////////////////////////////////////////////////////////////////
// Bundle all `std` rules

// Bundle everything together
bundle_rule!(
    "std",              // Name of the bundle
    "ptr",              // Make `ptr` mean `^ void`
    "get_method",       // Make `[]` be `Get`
    "void_return",      // Add void returns where needed
    "auto_if_paren",    // Parenthesize if statements
    "auto_while_paren", // Parenthesize while loops
    "auto_match_paren", // Parenthesize match statements
    "easy_method",      // Allow `let type.name()` notation
    "auto_init",        // Allows `let a: type = b;` notation
    "def_init",         // Allows `let a = b;` notation
    "for",              // Allow for loop syntax
    "trait",            // Allows traits.
    "does",             // Clause keyword aliases
    "is",               // Clause keyword aliases
    "has",              // Clause keyword aliases
    "needs",            // Clause keyword aliases
    "implies"           // Clause keyword aliases
);

////////////////////////////////////////////////////////////////
