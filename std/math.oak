/*
A basic math package for Oak

Jordan Dehmel, 2023
*/

package!("std");
use_rule!("std");

// Pi to 8 decimal places
let math_pi! = 3.14159265;

// Euler's constant e to 8 decimal places
let math_e! = 2.71828182;

// Returns true if a is even
let even(a: i128) -> bool
{
    let out: bool;

    if (a % to_i128(2) == to_i128(0))
    {
        out = true;
    }
    else
    {
        out = false;
    }

    out
}

let even(a: u128) -> bool
{
    let out: bool;

    if (a % to_u128(2) == to_u128(0))
    {
        out = true;
    }
    else
    {
        out = false;
    }

    out
}

// Return the absolute value of x
let abs(x: i32) -> i32
{
    let out: i32;
    out = x;

    if (out < 0)
    {
        out *= -1;
    }

    out
}

let abs(x: f64) -> f64
{
    let out: f64;
    out = x;

    if (f_to_i(out) < 0)
    {
        out *= -1.0;
    }

    out
}

let min<t>(a: t, b: t) -> t
{
    let out: t;

    if (a < b)
    {
        out = a;
    }
    else
    {
        out = b;
    }

    out
}

let max<t>(a: t, b: t) -> t
{
    let out: t;

    if (a > b)
    {
        out = a;
    }
    else
    {
        out = b;
    }

    out
}

// Return a to the power of b
let pow(a: i32, b: i32) -> i128
{
    let out: i32;
    out = 1;

    let counter: i32;
    counter = b;

    while (counter > 0)
    {
        out *= a;

        counter -= 1;
    }

    out
}

let pow(a: f64, b: i32) -> f64
{
    let out: f64;
    out = 1.0;

    let counter: i32;
    counter = b;

    while (counter > 0)
    {
        out *= a;

        counter -= 1;
    }

    out
}

// Return the factorial of a number x
let fact(x: i32) -> i128
{
    let out: i128;
    out = to_i128(1);

    let counter: i32;
    counter = x;

    while (counter > 0)
    {
        out *= to_i128(counter);
        counter -= 1;
    }

    out
}

let radians_to_degrees(rad: f64) -> f64
{
    180.0 * rad / math_pi!
}

let degrees_to_radians(deg: f64) -> f64
{
    math_pi! * deg / 180.0
}

/*
Takes in radians.
Uses a ninth-degree Taylor polynomial with x modulo-ed by pi
$x - \frac{x^3}{3!} +
\frac{x^5}{5!} - \frac{x^7}{7!} + \frac{x^9}{9!}$
*/
let sin(x: f64) -> f64
{
    let real_x: f64 = x;

    let pi: f64;
    pi = math_pi!;

    if (real_x < 0.0)
    {
        while (real_x <= (-1.0 * pi))
        {
            real_x += 2.0 * pi;
        }
    }
    else
    {
        while (real_x >= pi)
        {
            real_x -= 2.0 * pi;
        }
    }

    let out: f64;
    out = 0.0;

    // Not black magic; Just a ninth-order Taylor
    // polynomial
    out += real_x;
    out += pow(real_x, 3) * -0.1666666666666;
    out += pow(real_x, 5) * 0.0083333333333;
    out += pow(real_x, 7) * -0.0001984126984;
    out += pow(real_x, 9) * 0.0000027557319;

    out
}

// Uses $cos(x) = sin(x - \frac{\pi}{2})$
let cos(x: f64) -> f64
{
    let pi: f64;
    pi = math_pi!;

    sin(x + 0.5 * pi)
}

// Uses $tan(x) = \frac{sin(x)}{cos(x)}$
let tan(x: f64) -> f64
{
    let s: f64;
    let c: f64;

    s = sin(x);
    c = cos(x);

    (s / c)
}

// Return the largest integer less than or equal to x
let floor(x: f64) -> i128
{
    f_to_i(x)
}

// Return the smallest integer greater than or equal to x
let ceiling(x: f64) -> i128
{
    f_to_i(x + 0.9999)
}

// Return the closest integer to x
let round(x: f64) -> i32
{
    let out: f64;
    out = x;

    if (out > 0.0)
    {
        out += 0.5;
    }
    else
    {
        out -= 0.5;
    }

    floor(out)

    out
}

// Return the square root of a float
/*
Uses Newtonian iteration
To find \sqrt{k}:
x_{n + 1} = 0.5 * (x_n + \frac{k}{x_n})
*/
let sqrt(x: f64) -> f64
{
    // Get a decent guess
    let out: f64;
    out = x / 2.0;

    // Ensure guess is not one
    out += 1.0;

    let counter: i32;
    let temp: f64;

    counter = 10;
    while (counter > 0)
    {
        temp = out;
        temp += x / out;
        temp /= 2.0;

        out = temp;

        counter -= 1;
    }

    out
}

// Return the remainder of a / b
let f_mod(a: f64, b: f64) -> f64
{
    let temp: f64;

    // Num that b goes into a
    temp = a / b;

    // Integer version
    temp = i_to_f(floor(temp));

    // Evenly divisible amount of a
    temp *= b;

    // Return a - evenly divisible amount
    (a - temp)
}
