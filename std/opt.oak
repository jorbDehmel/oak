include!("std/panic_inter.oak");

let opt<t>: enum
{
    some: t,
    none: unit,
}
post
{
    New<t>(self: ^opt<t>);
    Copy<t>(self: ^opt<t>, other: opt<t>);
    unwrap<t>(self: ^opt<t>);
}

let New<t>(self: ^opt<t>) -> void
{
    wrap_none(self);
}

let Del<t>(self: ^opt<t>) -> void
{
    match (self)
    {
        case some(data)
        {
            Del(data);
        }
        default {}
    }
}

let Copy<t>(self: ^opt<t>, other: opt<t>) -> void
{
    match (other)
    {
        case some(data)
        {
            wrap_some(self, ^data);
        }
        default
        {
            wrap_none(self);
        }
    }
}

let unwrap<t>(self: ^opt<t>) -> t
{
    let out: t;

    match (^self)
    {
        case some(data)
        {
            @out = ^data;
        }
        default
        {
            panic!();
        }
    }

    out
}
