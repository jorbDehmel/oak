/*
Defines the opt<t> enum for Oak. This represents either some
data or no data. This is equivalent to the Null or None
keywords that languages like Java and Python provide, except
that only datatypes declared as this type may have a null
value. These are similar, though not exactly the same, to the
res<t> enum.
Jordan Dehmel, 2024
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

include!("std/panic.oak");

// A generic which allows `t` to have a null value, represented
// by the `none` option.
let opt<t>: enum
{
    some: t,
    none: unit,
}
post
{
    New<t>(self: ^opt<t>);
    Copy<t>(self: ^opt<t>, other: opt<t>);
    unwrap<t>(self: ^opt<t>);
}

// Default to the none option.
let New<t>(self: ^opt<t>) -> void
{
    wrap_none(self);
}

// If some, call the destructor on the underlying instance.
// Otherwise, do not call any destructor.
let Del<t>(self: ^opt<t>) -> void
{
    match (self)
    {
        case some(data)
        {
            Del(data);
        }
        default {}
    }
}

// Copy from one opt to another.
let Copy<t>(self: ^opt<t>, other: opt<t>) -> opt<t>
{
    match (other)
    {
        case some(data)
        {
            wrap_some(self, ^data);
        }
        default
        {
            wrap_none(self);
        }
    }

    other
}

// DANGER! Use with caution!
// If the passed object is `some`, then return the data it
// holds. Otherwise, cause an unrecoverable kernel panic.
let unwrap<t>(self: ^opt<t>) -> t
{
    let out: t;

    match (^self)
    {
        case some(data)
        {
            @out = ^data;
        }
        default
        {
            panic!();
        }
    }

    out
}
