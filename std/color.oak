/*
Defines some terminal colors using ANSI escape codes.

Important note: ONLY use these on the terminal, they can cause
large issues when used in files! There are terminal-based
applications available for POSIX systems which can clean ANSI
escape codes out of files, but the easiest thing to do is just
to not put them there.

See here for history and more information:
https://en.wikipedia.org/wiki/ANSI_escape_code

Jordan Dehmel, 2023-
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

include!("std/io_inter.oak");
include!("std/string.oak");

let ansi_code_end! = "\033[0;0m";

// Section-based `begin` functions.
// These calls begin a given effect and do not stop it until
// `end_effects()` is called.

let begin_red() -> void { print("\033[0;31m"); }
let begin_green() -> void { print("\033[0;32m"); }
let begin_blue() -> void { print("\033[0;34m"); }
let begin_yellow() -> void { print("\033[0;33m"); }
let begin_magenta() -> void { print("\033[0;35m"); }
let begin_cyan() -> void { print("\033[0;36m"); }

// Bold section-based `begin` functions.

let begin_red_bold() -> void { print("\033[1;31m"); }
let begin_green_bold() -> void { print("\033[1;32m"); }
let begin_blue_bold() -> void { print("\033[1;34m"); }
let begin_yellow_bold() -> void { print("\033[1;33m"); }
let begin_magenta_bold() -> void { print("\033[1;35m"); }
let begin_cyan_bold() -> void { print("\033[1;36m"); }

// This is the most important one here: Call this to remove all
// effects and return to a regular terminal.
let end_effects() -> void { print(ansi_code_end!); }

// Regular colored text w/ reset code after.
// These functions turn a given `std` string into a version of
// itself which has the given effect. This prepends and appends
// to the string.

let red(on: string) -> string
{
    let out: string;
    out = "\033[0;31m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let green(on: string) -> string
{
    let out: string;
    out = "\033[0;32m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let blue(on: string) -> string
{
    let out: string;
    out = "\033[0;34m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let yellow(on: string) -> string
{
    let out: string;
    out = "\033[0;33m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let magenta(on: string) -> string
{
    let out: string;
    out = "\033[0;35m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let cyan(on: string) -> string
{
    let out: string;
    out = "\033[0;36m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

// Boldface versions of the above functions.
// These still all operate on `std` strings, not `str` literals.

let red_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;31m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let green_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;32m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let blue_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;34m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let yellow_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;33m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let magenta_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;35m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

let cyan_bold(on: string) -> string
{
    let out: string;
    out = "\033[1;36m";

    let temp: string;
    temp = ansi_code_end!;

    out = out + on;
    out = out + temp;
    out
}

// Raw string literal versions.
// These operate on raw string literals for compatability's
// sake.

let red(on: str) -> string
{
    let out: string;
    out = on;
    red(out)
}

let green(on: str) -> string
{
    let out: string;
    out = on;
    green(out)
}

let blue(on: str) -> string
{
    let out: string;
    out = on;
    blue(out)
}

let yellow(on: str) -> string
{
    let out: string;
    out = on;
    yellow(out)
}

let magenta(on: str) -> string
{
    let out: string;
    out = on;
    magenta(out)
}

let cyan(on: str) -> string
{
    let out: string;
    out = on;
    cyan(out)
}

let red_bold(on: str) -> string
{
    let out: string;
    out = on;
    red_bold(out)
}

let green_bold(on: str) -> string
{
    let out: string;
    out = on;
    green_bold(out)
}

let blue_bold(on: str) -> string
{
    let out: string;
    out = on;
    blue_bold(out)
}

let yellow_bold(on: str) -> string
{
    let out: string;
    out = on;
    yellow_bold(out)
}

let magenta_bold(on: str) -> string
{
    let out: string;
    out = on;
    magenta_bold(out)
}

let cyan_bold(on: str) -> string
{
    let out: string;
    out = on;
    cyan_bold(out)
}
