/*
Basic file operations for Oak.
Jordan Dehmel, 2023
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

link!("std/file.o");
include!("std/string.oak");
include!("std/interface.oak");

// An input file
let i_file: struct
{
    // Internals; Don't touch
    internal: hidden_64_bytes,
}

// An output file
let o_file: struct
{
    // Internals; Don't touch
    internal: hidden_64_bytes,
}

let ExtInit(self: ^i_file) -> void;
let ExtInit(self: ^o_file) -> void;

let ExtDel(self: ^i_file) -> void;
let ExtDel(self: ^o_file) -> void;

// Methods defined in C++
let New(self: ^i_file) -> void
{
    ExtInit(self);
}

let New(self: ^o_file) -> void
{
    ExtInit(self);
}

let Del(self: ^i_file) -> void
{
    ExtDel(self);
}

let Del(self: ^o_file) -> void
{
    ExtDel(self);
}

let open(self: ^i_file, name: str) -> void;
let open(self: ^o_file, name: str) -> void;

let open(self: ^i_file, name: []i8) -> void;
let open(self: ^o_file, name: []i8) -> void;

let close(self: ^i_file) -> void;
let close(self: ^o_file) -> void;

let read_char(self: ^i_file) -> i8;
let write_char(self: ^o_file, what: i8) -> void;

let tell(self: ^i_file) -> u128;
let tell(self: ^o_file) -> u128;

let seek(self: ^i_file, pos: u128) -> void; 
let seek(self: ^o_file, pos: u128) -> void;

let getline(self: ^i_file, max: u128) -> string;
let eof(self: ^i_file) -> bool;

let size(self: ^i_file) -> u128;

// Defined in Oak
let read(self: ^i_file, size: u128) -> string
{
    let out: string;
    reserve(out, size + 1u128);

    let pos: u128;
    pos = 0u128;
    while (pos < size)
    {
        Get(out.data, pos) = read_char(self);
        pos += 1u128;
    }

    Get(out.data, pos) = 0i8;
    out.current_length = pos + 1u128;

    out
}

let write(self: ^o_file, data: ^string) -> void
{
    let pos: u128;
    pos = 0u128;
    while (pos < data.current_length)
    {
        write_char(self, Get(data, pos));
        pos += 1u128;
    }
}
