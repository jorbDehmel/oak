////////////////////////////////////////////////////////////////

/*
A basic turtle with a pen. Concept based off of the Python
turtle package.

Jordan Dehmel, 2024
jdehmel@outlook.com
*/

////////////////////////////////////////////////////////////////

package!("std", "sdl");
include!("std/math.oak");
use_rule!("std");

////////////////////////////////////////////////////////////////

/*
A structure representing a turtle with a pen. Has location and
orientation. The center of the canvas is (0, 0). An orientation
of 0 means the turtle is facing directly North (upwards). 90 is
East, 180 is South, and 270 is West. 360 is North again.
*/
let turtle::turtle: struct
{
    x, y: u64,
    pen_is_down, is_running: bool,
    orientation, speed, radius: f64,

    w, h, delay: u64,
    window: sdl::window,
    bg_color, pen_color, turtle_color: sdl::color,
    pixels: [][]sdl::color,
}

////////////////////////////////////////////////////////////////
// Basic methods
////////////////////////////////////////////////////////////////

// Early definition to avoid errors
let refresh(_: ^turtle::turtle) -> void;

/*
Create a new turtle, with all attributes set to defaults.
*/
let New(self: ^turtle::turtle) -> void
{
    self.x = 0;
    self.y = 0;
    self.pen_is_down = true;
    self.orientation = 0.0;
    self.speed = 2.0;
    self.radius = 6.0;

    self.is_running = true;

    self.w = 512;
    self.h = 512;

    self.delay = 10;
    self.bg_color = (0xFF, 0xFF, 0xFF, 0xFF);
    self.pen_color = (0x00, 0x00, 0x00, 0xFF);
    self.turtle_color = (0x00, 0x00, 0x00, 0xFF);

    sdl::init();
    New(self.window);
    self.window = (self.w, self.h);

    // Initialize pixels array
    alloc!(self.pixels, to_u128(self.h));

    for (let i: u128 = 0; i < self.h; i += 1)
    {
        alloc!(ptrarr!(self.pixels, i), to_u128(self.w));

        for (let j: u128 = 0; j < self.w; j += 1)
        {
            ptrarr!(ptrarr!(self.pixels, i), j) = self.bg_color;
        }
    }
}

/*
Set a turtle free, and close its window.
*/
let Del(self: ^turtle::turtle) -> void
{
    Del(self.window);
    sdl::quit();

    let i: u128 = 0;
    while i < self.h
    {
        free!(ptrarr!(self.pixels, i));
        ptrcpy!(ptrarr!(self.pixels, i), 0);

        i += 1;
    }

    free!(self.pixels, self.h);
    ptrcpy!(self.pixels, 0);
}

/*
Returns true if the given position is already filled, false
otherwise.
*/
let is_filled(self: ^turtle::turtle, x: i128, y: i128) -> bool
{
    // Modulo inputs by sizes to avoid overflow
    let real_x: i128 = x % to_i128(to_i32(self.w));
    let real_y: i128 = y % to_i128(to_i32(self.h));

    ptrarr!(ptrarr!(self.pixels, real_y), real_x)
        != self.bg_color
}

/*
Does nothing for a certain number of seconds.
*/
let sleep(self: ^turtle::turtle, s: f64) -> void
{
    if self.is_running
    {
        let ms: i32;
        ms = to_i32(floor(s * 1000.0));
        sdl::delay(ms);
        self.refresh();
    }
}

////////////////////////////////////////////////////////////////
// Drawing stuff
////////////////////////////////////////////////////////////////

/*
Set the color of the turtle's pen.
*/
let color(self: ^turtle::turtle, r: u8, g: u8, b: u8) -> void
{
    self.pen_color.r = r;
    self.pen_color.g = g;
    self.pen_color.b = b;
}
let color(self: ^turtle::turtle, to: sdl::color) -> void
{
    self.pen_color = to;
}

/*
Get the color of the turtle's pen.
*/
let color(self: ^turtle::turtle) -> sdl::color
{
    let out = self.pen_color;
    out
}

/*
Rotate a point around another by a certain number of degrees.
Note a method, so need namespace qualification. Results go into
x and y.
*/
let turtle::rotate(
    what: ^sdl::coord,
    about: sdl::coord,
    rot: f64) -> void
{
    if rot != 0.0
    {
        what.x -= about.x;
        what.y -= about.y;

        let real_rot = rot;

        while real_rot > 360.0
        {
            real_rot -= 360.0;
        }
        while real_rot < 0.0
        {
            real_rot += 360.0;
        }

        let c: f64 = sdl::cos(degrees_to_radians(360.0 - rot));
        let s: f64 = sdl::sin(degrees_to_radians(360.0 - rot));
        let x: f64 = to_f64(to_i32(what.x));
        let y: f64 = to_f64(to_i32(what.y));

        what.x = to_i32(x * c - y * s);
        what.y = to_i32(y * c + x * s);

        what.x += about.x;
        what.y += about.y;
    }
}

/*
Refresh the window.
*/
let refresh(self: ^turtle::turtle) -> void
{
    if self.is_running
    {
        let start = sdl::get_ticks();

        fill(self.window, self.bg_color);

        // Draw pixels
        let point: sdl::coord;

        for (point.y = 0;
            point.y < to_u64(self.h);
            point.y += 1)
        {
            for (point.x = 0;
                point.x < to_u64(self.w);
                point.x += 1)
            {
                if self.is_filled(point.x, point.y)
                {
                    draw_dot(
                        self.window,
                        point,
                        ptrarr!(
                            ptrarr!(
                                self.pixels,
                                point.y
                            ),
                            point.x
                        )
                    );
                }
            }
        }

        // Draw self (rotated triangle)
        let a: sdl::coord;
        let b: sdl::coord;
        let c: sdl::coord;

        a = (to_i32(self.x), to_i32(to_f64(to_i32(self.y)) + self.radius));
        b = (to_i32(to_f64(to_i32(self.x)) - self.radius),
             to_i32(to_f64(to_i32(self.y)) - self.radius));
        c = (to_i32(to_f64(to_i32(self.x)) + self.radius),
             to_i32(to_f64(to_i32(self.y)) - self.radius));

        let center: sdl::coord;
        center = (self.x, self.y);

        turtle::rotate(a, center, self.orientation);
        turtle::rotate(b, center, self.orientation);
        turtle::rotate(c, center, self.orientation);

        // Outline
        draw_line(self.window, a, b, self.turtle_color);
        draw_line(self.window, b, c, self.turtle_color);
        draw_line(self.window, c, a, self.turtle_color);

        show(self.window);

        // Process input signals
        let event: sdl_event;
        let flag_var: bool = true;
        while flag_var
        {
            event.wrap_sdl_none();
            event = sdl::poll_event();

            match event
            {
                case sdl::none()
                {
                    flag_var = false;
                }

                case sdl::key_down_event(data)
                {
                    if (data.keycode == 27u128)
                    {
                        self.is_running = false;
                    }
                }

                default
                {
                    ;
                }
            }
        }

        let end = sdl::get_ticks();
        let elapsed = end - start;

        if elapsed < self.delay
        {
            sdl::delay(to_i32(self.delay - elapsed));
        }
    }
}

/*
Clear the canvas of any pen marks.
*/
let clear(self: ^turtle::turtle) -> void
{
    for (let y: u128 = 0; y < self.h; y += 1)
    {
        for (let x: u128 = 0; x < self.w; x += 1)
        {
            ptrarr!(ptrarr!(self.pixels, y), x) = self.bg_color;
        }
    }

    self.refresh();
}

////////////////////////////////////////////////////////////////
// Movement stuff
////////////////////////////////////////////////////////////////

/*
Turn the turtle left by a given number of degrees.
*/
let left(self: ^turtle::turtle, by: f64) -> void
{
    let frames: i128 = floor(by / self.speed);
    let dt: f64 = by / to_f64(frames);

    let start_orientation = self.orientation;

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        self.orientation += dt;

        while (self.orientation < 0.0)
        {
            self.orientation += 360.0;
        }
        while (self.orientation >= 360.0)
        {
            self.orientation -= 360.0;
        }

        self.refresh();
    }

    // Ensure accurate rotation
    start_orientation += by;
    self.orientation = start_orientation;
    while (self.orientation < 0.0)
    {
        self.orientation += 360.0;
    }
    while (self.orientation >= 360.0)
    {
        self.orientation -= 360.0;
    }
}

/*
Turn the turtle right by a given number of degrees.
*/
let right(self: ^turtle::turtle, by: f64) -> void
{
    let frames: i32 = floor(by / self.speed);
    let dt: f64 = by / to_f64(frames);

    let start_orientation = self.orientation;

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        self.orientation -= dt;

        while (self.orientation < 0.0)
        {
            self.orientation += 360.0;
        }
        while (self.orientation >= 360.0)
        {
            self.orientation -= 360.0;
        }

        self.refresh();
    }

    // Ensure accurate rotation
    start_orientation -= by;
    self.orientation = start_orientation;
    while (self.orientation < 0.0)
    {
        self.orientation += 360.0;
    }
    while (self.orientation >= 360.0)
    {
        self.orientation -= 360.0;
    }
}

/*
Move the turtle forward in the current direction. If the pen is
down, it will make markings in the current pen color.
*/
let forward(self: ^turtle::turtle, by: i128) -> void
{
    let frames: i32 = floor(to_f64(by) / self.speed);

    let dx: f64 = to_f64(by) * sdl::sin(
        degrees_to_radians(self.orientation)) / to_f64(frames);
    let dy: f64 = to_f64(by) * sdl::cos(
        degrees_to_radians(self.orientation)) / to_f64(frames);

    let real_x: f64 = i_to_f(self.x);
    let real_y: f64 = i_to_f(self.y);

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        real_x += dx;
        real_y += dy;

        self.x = floor(real_x);
        self.y = floor(real_y);

        while self.x < 0i128
        {
            self.x += self.w;
        }
        while self.y < 0i128
        {
            self.y += self.h;
        }

        self.x %= self.w;
        self.y %= self.h;

        if self.pen_is_down
        {
            ptrarr!(ptrarr!(self.pixels, self.y), self.x)
                = self.pen_color;
        }

        self.refresh();
    }
}

/*
Move the turtle to an absolute position, rather than just
forward or backward.
*/
let set_position(self: ^turtle::turtle, x: i128, y: i128)
    -> void
{
    let t1 = x - self.x;
    let t2 = y - self.y;
    let by: f64 = sqrt(i_to_f(t1 * t1 + t2 * t2));

    let frames: i32 = floor(by / self.speed);

    if frames == 0
    {
        frames = 1;
    }

    let dx: f64 = to_f64(x - self.x) / to_f64(frames);
    let dy: f64 = to_f64(y - self.y) / to_f64(frames);

    let real_x: f64 = i_to_f(self.x);
    let real_y: f64 = i_to_f(self.y);

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        real_x += dx;
        real_y += dy;

        self.x = floor(real_x);
        self.y = floor(real_y);

        while self.x < 0i128
        {
            self.x += self.w;
        }
        while self.y < 0i128
        {
            self.y += self.h;
        }

        self.x %= self.w;
        self.y %= self.h;

        if self.pen_is_down
        {
            ptrarr!(ptrarr!(self.pixels, self.y), self.x)
                = self.pen_color;
        }

        self.refresh();
    }
}

/*
Set the current orientation, regardless of the current one.
*/
let set_orientation(self: ^turtle::turtle, to: f64) -> void
{
    let frames: i32 = floor(to / self.speed);
    let dt: f64 = to_f64(to) / to_f64(frames);

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        self.orientation += dt;

        while (self.orientation < 0.0)
        {
            self.orientation += 360.0;
        }
        while (self.orientation >= 360.0)
        {
            self.orientation -= 360.0;
        }

        self.refresh();
    }

    self.orientation = to;
}

/*
Move the turtle backwards a given number of steps. If the pen is
down, it will make markings.
*/
let backward(self: ^turtle::turtle, by: i128) -> void
{
    let frames: i32 = floor(to_f64(by) / self.speed);

    let dx: f64 = to_f64(by) * sdl::sin(
        degrees_to_radians(self.orientation)) / to_f64(frames);
    let dy: f64 = to_f64(by) * sdl::cos(
        degrees_to_radians(self.orientation)) / to_f64(frames);

    let real_x: f64 = i_to_f(self.x);
    let real_y: f64 = i_to_f(self.y);

    for (let frame: i32 = 0; frame < frames; frame += 1)
    {
        real_x -= dx;
        real_y -= dy;

        self.x = floor(real_x);
        self.y = floor(real_y);

        while self.x < 0i128
        {
            self.x += self.w;
        }
        while self.y < 0i128
        {
            self.y += self.h;
        }

        self.x %= self.w;
        self.y %= self.h;

        if self.pen_is_down
        {
            ptrarr!(ptrarr!(self.pixels, self.y), self.x)
                = self.pen_color;
        }

        self.refresh();
    }
}

/*
Move the turtle's pen up, such that it does not make markings
when it moves.
*/
let up(self: ^turtle::turtle) -> void
{
    self.pen_is_down = false;
}

/*
Move the turtle's pen down, such that it does make markings when
it moves.
*/
let down(self: ^turtle::turtle) -> void
{
    self.pen_is_down = true;
}

let save(self: ^turtle::turtle, filepath: []i8) -> void
{
    sdl::save(self.window, filepath);
}

////////////////////////////////////////////////////////////////
