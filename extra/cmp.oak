/*
Analogous to the result of strcmp.

Jordan Dehmel, 2023-
jdehmel@outlook.com
*/

// Ensure that this will work with other dialects
tag!("no_dialect");

include!("std/unit.oak");

// The result of a comparison. Can either be -1 (less than),
// 0 (equal to), or 1 (greater than). Not widely used.
let cmp: struct
{
    data: i8,
}

// Copy from the result of strcmp (or other analogous function).
let Copy(self: ^cmp, from: i8) -> cmp
{
    if (from == 0i8)
    {
        self.data = 0i8;
    }
    else if (from < 0i8)
    {
        self.data = -1i8;
    }
    else
    {
        self.data = 1i8;
    }

    ^self
}

// Copy from another cmp result.
let Copy(self: ^cmp, other: cmp) -> cmp
{
    self.data = other.data;
    ^self
}

// The remaining functions are all ways of collapsing the
// result to be more comprehensible.

let eq(self: ^cmp) -> bool
{
    return self.data == 0i8;
}

let neq(self: ^cmp) -> bool
{
    return self.data != 0i8;
}

let less(self: ^cmp) -> bool
{
    return self.data == -1i8;
}

let leq(self: ^cmp) -> bool
{
    return self.data <= 0i8;
}

let great(self: ^cmp) -> bool
{
    return self.data == 1i8;
}

let greq(self: ^cmp) -> bool
{
    return self.data >= 0i8;
}
