/*
A bitset for Oak

Jordan Dehmel, 2023
jdehmel@outlook.com
*/

package!("std");
include!("std/opt.oak");
include!("extra/bit_print.oak");
use_rule!("std");

/*
A bitset for Oak. Size is a positive integer representing the
number of BYTES, not bits. Least significant bits are first.
*/
let extra::bitset<size>: struct
{
    data: [size]u8,
}
pre
{
    opt<bool>;
}
post
{
    Get<size>(_: ^extra::bitset<size>, _: u128);

    set<size>(_: ^extra::bitset<size>, _: u128);
    clear<size>(_: ^extra::bitset<size>, _: u128);
    flip<size>(_: ^extra::bitset<size>, _: u128);

    print<size>(_: ^extra::bitset<size>);
}

////////////////////////////////////////////////////////////////
// Implementations
////////////////////////////////////////////////////////////////

let Get<size>(self: ^extra::bitset<size>, i: u128) -> opt<bool>
{
    let out: opt<bool>;
    out.wrap_none();

    if i > to_u128(size * 8)
    {
        return out;
    }

    let byte_i: u128 = i / to_u128(8);
    let bit_i: u8 = to_u8(i % to_u128(8));
    bit_i = 7 - bit_i;
    let got: u8 = Get(self.data, byte_i);
    let mask: u8 = Lbs(1, bit_i);
    got &= mask;

    if got != 0
    {
        out.wrap_some(true);
    }
    else
    {
        out.wrap_some(false);
    }

    out
}

let set<size>(self: ^extra::bitset<size>, i: u128) -> void
{
    let byte_i: u128 = i / to_u128(8);
    let bit_i: u8 = to_u8(i % to_u128(8));
    bit_i = 7 - bit_i;
    let mask: u8 = Lbs(1, bit_i);

    Get(self.data, byte_i) |= mask;
}

let clear<size>(self: ^extra::bitset<size>, i: u128) -> void
{
    let byte_i: u128 = i / to_u128(8);
    let bit_i: u8 = to_u8(i % to_u128(8));
    bit_i = 7 - bit_i;
    let mask: u8 = Lbs(1, bit_i);
    mask = 255 - mask;

    Get(self.data, byte_i) &= mask;
}

let flip<size>(self: ^extra::bitset<size>, i: u128) -> void
{
    let res = self.Get(i);

    if unwrap(res)
    {
        self.clear(i);  
    }
    else
    {
        self.set(i);
    }
}

let print<size>(what: ^extra::bitset<size>) -> void
{
    extra::bit_print<extra::bitset<size>>(_: ^extra::bitset<size>);

    extra::bit_print(what);
}
