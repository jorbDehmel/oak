// A basic interface to C++ regex functions.

package!("std");
use_rule!("std");

include!("std/string.oak");
include!("std/interface.oak");

link!("-lboost_regex");
link!("extra/regex_inter.o");

let extra::regex: struct
{
    __a: hidden_32_bytes,
}

let New(self: ^extra::regex) -> void;
let Del(self: ^extra::regex) -> void;

let Copy(self: ^extra::regex, pattern: ^string
    ) -> ^extra::regex;
let Copy(self: ^extra::regex, pattern: str) -> ^extra::regex;

let extra::regex_smatch: struct
{
    __a: hidden_64_bytes,
    __b: hidden_32_bytes,
}

let New(self: ^extra::regex_smatch) -> void;

let size(self: ^extra::regex_smatch) -> u64;
let str(self: ^extra::regex_smatch) -> string;
let Get(self: ^extra::regex_smatch, index: u32) -> string;

let extra::regex_match(text: ^string, pattern: ^extra::regex
    ) -> bool;
let extra::regex_match(text: ^string, pattern: ^extra::regex,
    into: ^extra::regex_smatch) -> bool;

let extra::regex_search(text: ^string, pattern: ^extra::regex
    ) -> bool;
let extra::regex_search(text: ^string, pattern: ^extra::regex,
    into: ^extra::regex_smatch) -> bool;
