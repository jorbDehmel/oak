// file_server.oak
package!("std");
use_rule!("std");

include!("std/string.oak",
        "std/string_ops.oak",
        "std/file.oak",
        "std/sock.oak",
        "std/printf.oak",
        "std/conv_extra.oak");

include!("extra/regex_inter.oak");

// Sizes will be sent using this many chars
let size_chars! = to_u128(8);

// Handle a single request
let do_request(server: ^server_sock, request: string) -> void
{
}

let main() -> i32
{
    let is_listening = true;

    // Create empty server socket
    let server: server_sock;

    // Initialize server socket to localhost on port 1234
    // Save result of initialization into result
    let result = server = ("127.0.0.1", to_u16(1234));

    let size_str: string;
    let size: u128;
    let request: string;

    while is_listening
    {
        // Listen for a connection
        // save connection status in result
        result = server.listen();

        size_str = server.recv(size_chars!);
        size = to_u128(to_i128(size_str));

        if size != to_u128(0)
        {
            request = server.recv(size);

            if request == "quit"
            {
                is_listening = false;
            }
            else
            {
                do_request(server, request);
            }
        }
        else
        {
            is_listening = false;
        }
    }
    
    0
}
