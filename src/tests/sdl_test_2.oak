// Basic SDL functionality testing 2
// Legacy passed

package!("std");
package!("sdl");

include!("std/printf.oak");

use_rule!("std");

let main() -> i32
{
    let black: sdl_color;
    let white: sdl_color;
    white.Copy(to_u8(255), to_u8(255), to_u8(255), to_u8(255));

    let w: i32 = 512;
    let h: i32 = 512;

    let wind: sdl_window;
    Copy(@wind, to_u64(w), to_u64(h));

    let event: sdl_event;
    let rect: sdl_rect;
    rect.Copy(to_u64(w / 2), to_u64(h / 2), to_u64(8), to_u64(8));

    let start: i32;
    let end: i32;
    let elapsed: i32;
    let fps: f64;

    let up_is_pressed: bool = false;
    let down_is_pressed: bool = false;
    let left_is_pressed: bool = false;
    let right_is_pressed: bool = false;

    let running: bool = true;
    while running
    {
        start = sdl::get_ticks();

        // Clear screen
        wind.fill(black);

        // Draw character
        wind.draw_rect(rect, white);

        // Present
        wind.show();

        // Poll events
        let flag_var: bool = true;
        while flag_var
        {
            event.wrap_sdl_none();
            event = sdl::poll_event();

            match (event)
            {
                case sdl::none()
                {
                    flag_var = false;
                }

                case sdl::key_down_event(data)
                {
                    let keycode: i128 = data.keycode;

                    if (keycode == to_i128(27))
                    {
                        running = false;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("w"))))
                    {
                        up_is_pressed = true;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("s"))))
                    {
                        down_is_pressed = true;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("a"))))
                    {
                        left_is_pressed = true;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("d"))))
                    {
                        right_is_pressed = true;
                    }
                }

                case sdl::key_up_event(data)
                {
                    let keycode: i128 = data.keycode;

                    if (keycode == to_i128(to_i32(to_i8("w"))))
                    {
                        up_is_pressed = false;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("s"))))
                    {
                        down_is_pressed = false;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("a"))))
                    {
                        left_is_pressed = false;
                    }
                    else if (keycode == to_i128(to_i32(to_i8("d"))))
                    {
                        right_is_pressed = false;
                    }
                }

                default
                {
                    ;
                }
            }
        }

        if up_is_pressed
        {
            if rect.y > to_u64(0)
            {
                rect.y -= to_u64(1);
            }
        }

        if down_is_pressed
        {
            if rect.y < to_u64(h)
            {
                rect.y += to_u64(1);
            }
        }

        if left_is_pressed
        {
            if rect.x > to_u64(0)
            {
                rect.x -= to_u64(1);
            }
        }

        if right_is_pressed
        {
            if rect.x < to_u64(w)
            {
                rect.x += to_u64(1);
            }
        }

        end = sdl::get_ticks();
        elapsed = end - start;

        if elapsed < 32
        {
            sdl::delay(32 - elapsed);
        }
    }

    0
}
