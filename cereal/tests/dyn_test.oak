/*
Tests serialization of dynamic blocks.
*/

package!("std", "cereal");
include!("cereal/blocks.oak", "std/printf.oak");
use_rule!("std");

let main() -> i32
{
    cereal::dyn_serializable<i32>;

    let dyn_thing: []i32;
    alloc!(dyn_thing, 32u128);

    for (let i = 0i32; i < 32i32; ++i)
    {
        Get(dyn_thing, i) = i;
    }

    let b: extra::string_builder;
    let pickled: string;
    serialize(dyn_thing, 32u128, b);
    pickled = b.collapse();

    print(pickled);
    endl();

    let after_pickle: []i32;
    let size: u128;
    let pos = 0u128;

    deserialize(after_pickle, size, pickled.data, pos);

    let i = 0u128;
    while i < size
    {
        printf!("% ", Get(dyn_thing, i));
        ++i;
    }
    endl();

    free!(dyn_thing);

    i = 0u128;
    while i < size
    {
        printf!("% ", Get(after_pickle, i));
        ++i;
    }
    endl();

    free!(after_pickle);

    0i32
}
