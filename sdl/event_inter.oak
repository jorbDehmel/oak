////////////////////////////////////////////////////////////////

/*
Interfacial file defining the SDL event enum. This represents an
event happening between something (the user, the OS, etc) and
the SDL2 C library. This interfacial file allows these events to
be accessible from Oak.

Jordan Dehmel, 2023-present
jdehmel@outlook.com, GPLv3
*/

////////////////////////////////////////////////////////////////
// Packages and files

link!("sdl/event_inter.o");
include!("std/unit.oak");

////////////////////////////////////////////////////////////////
// Struct and enum definitions

let sdl::key_event_data: struct
{
    keycode: i128,
}

let sdl::mouse_move_event_data: struct
{
    x, y: i128,
}

let sdl::mouse_button_event_data: struct
{
    x, y: i128,
    code: i8,
}

let sdl::event: enum
{
    sdl::key_down_event: sdl::key_event_data,
    sdl::key_up_event: sdl::key_event_data,

    sdl::mouse_move_event: sdl::mouse_move_event_data,
    sdl::mouse_button_down_event: sdl::mouse_button_event_data,
    sdl::mouse_button_up_event: sdl::mouse_button_event_data,

    sdl::none: unit,
}

////////////////////////////////////////////////////////////////
// Interfacial functions

let sdl::poll_event() -> sdl::event;
let sdl::keycode_to_str(keycode: i128) -> str;

////////////////////////////////////////////////////////////////
// Internal method definitions

let Copy(self: ^sdl::event, other: sdl::event) -> ^sdl::event
{
    match (other)
    {
        case sdl::key_down_event(data)
        {
            wrap_sdl_key_down_event(self, ^data);
        }

        case sdl::key_up_event(data)
        {
            wrap_sdl_key_up_event(self, ^data);
        }

        case sdl::mouse_move_event(data)
        {
            wrap_sdl_mouse_move_event(self, ^data);
        }

        case sdl::mouse_button_down_event(data)
        {
            wrap_sdl_mouse_button_down_event(self, ^data);
        }

        case sdl::mouse_button_up_event(data)
        {
            wrap_sdl_mouse_button_up_event(self, ^data);
        }

        case sdl::none()
        {
            wrap_sdl_none(self);
        }
    }

    self
}

////////////////////////////////////////////////////////////////
