////////////////////////////////////////////////////////////////

/*
The main interfacial file for the Oak SDL library. This
interfaces with the C/C++ SDL2 library.

Jordan Dehmel, 2023-present
jdehmel@outlook.com, GPLv3
*/

////////////////////////////////////////////////////////////////

link!("sdl/sdl_inter.o");
include!("std/interface.oak");

////////////////////////////////////////////////////////////////
// Struct definitions

let sdl_window: struct
{
    width, height: u64,
    internal: hidden_64_bytes,
}

let sdl_color: struct
{
    r, g, b, a: u8,
}

let sdl_coord: struct
{
    x, y: u64,
}

let sdl_rect: struct
{
    x, y, w, h: u64,
}

////////////////////////////////////////////////////////////////
// Interfacial functions and/or methods

let ExtInit(self: ^sdl_window) -> void;
let ExtDel(Self: ^sdl_window) -> void;

let New(self: ^sdl_window) -> void
{
    ExtInit(self);
}

let Del(self: ^sdl_window) -> void
{
    ExtDel(self);
}

let Copy(self: ^sdl_window, w: u64, h: u64) -> void;

let sdl_enable_window_fullscreen(self: ^sdl_window) -> void;
let sdl_disable_window_fullscreen(self: ^sdl_window) -> void;
let sdl_save(self: ^sdl_window, filepath: []i8) -> void;

let New(self: ^sdl_color) -> void
{
    self.r = to_u8(0);
    self.g = to_u8(0);
    self.b = to_u8(0);
    self.a = to_u8(0);
}

let Copy(self: ^sdl_color, r: u8, g: u8, b: u8, a: u8) -> void
{
    self.r = r;
    self.g = g;
    self.b = b;
    self.a = a;
}

let Copy(self: ^sdl_color, other: sdl_color) -> void
{
    self.r = other.r;
    self.g = other.g;
    self.b = other.b;
    self.a = other.a;
}

let Eq(l: sdl_color, r: sdl_color) -> bool
{
    if (l.r != r.r)
    {
        return false;
    }
    else if (l.g != r.g)
    {
        return false;
    }
    else if (l.b != r.b)
    {
        return false;
    }
    else if (l.a != r.a)
    {
        return false;
    }

    return true;
}

let Neq(l: sdl_color, r: sdl_color) -> bool
{
    return Not(Eq(l, r));
}

let New(self: ^sdl_coord) -> void
{
    self.x = to_u64(0);
    self.y = to_u64(0);
}

let Copy(self: ^sdl_coord, x: u64, y: u64) -> void
{
    self.x = x;
    self.y = y;
}

let Copy(self: ^sdl_coord, other: sdl_coord) -> void
{
    self.x = other.x;
    self.y = other.y;
}

let New(self: ^sdl_rect) -> void
{
    self.x = to_u64(0);
    self.y = to_u64(0);
    self.w = to_u64(0);
    self.h = to_u64(0);
}

let Copy(self: ^sdl_rect, x: u64, y: u64, w: u64, h: u64)
    -> void
{
    self.x = x;
    self.y = y;
    self.w = w;
    self.h = h;
}

let Copy(self: ^sdl_rect, other: sdl_rect) -> void
{
    self.x = other.x;
    self.y = other.y;
    self.w = other.w;
    self.h = other.h;
}

let sdl_sin(x: f64) -> f64;
let sdl_cos(x: f64) -> f64;
let sdl_tan(x: f64) -> f64;

let sdl_init() -> void;
let sdl_quit() -> void;
let sdl_delay(ms: i32) -> void;
let sdl_get_ticks() -> i32;

let show(window: ^sdl_window) -> void;
let fill(window: ^sdl_window, color: sdl_color) -> void;

let draw_dot(window: ^sdl_window, point: sdl_coord,
    color: sdl_color) -> void;
let draw_line(window: ^sdl_window, point_a: sdl_coord,
    point_b: sdl_coord, color: sdl_color) -> void;
let draw_rect(window: ^sdl_window, rect: sdl_rect,
    color: sdl_color) -> void;

////////////////////////////////////////////////////////////////
