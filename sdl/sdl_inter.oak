////////////////////////////////////////////////////////////////

/*
The main interfacial file for the Oak SDL library. This
interfaces with the C/C++ SDL2 library.

Jordan Dehmel, 2023-present
jdehmel@outlook.com, GPLv3
*/

////////////////////////////////////////////////////////////////

link!("sdl/sdl_inter.o");
include!("std/interface.oak");

////////////////////////////////////////////////////////////////
// Struct definitions

// An interfacial struct which holds some parameters about an
// SDL2 window and contains enough spare space to contain it in
// C.
let sdl::window: struct
{
    width, height: u64,
    internal: hidden_64_bytes,
}

// Represents a single RGBA pixel color.
let sdl::color: struct
{
    r, g, b, a: u8,
}

// Represents a point on the screen. The top left corner is
// (0, 0).
let sdl::coord: struct
{
    x, y: u64,
}

// Represents a rectangle on the screen. x, y, w, and h are all
// in pixels.
let sdl::rect: struct
{
    x, y, w, h: u64,
}

////////////////////////////////////////////////////////////////
// Interfacial functions and/or methods

// Call the external C function to create the window.
let ExtInit(self: ^sdl::window) -> void;

// Call the external C function to destroy the window.
let ExtDel(Self: ^sdl::window) -> void;

// Create a new SDL2 window.
let New(self: ^sdl::window) -> void
{
    ExtInit(self);
}

// Delete an SDL2 window.
let Del(self: ^sdl::window) -> void
{
    ExtDel(self);
}

// Initialize a SDL2 window with the given width and height.
let Copy(self: ^sdl::window, w: u64, h: u64) -> ^sdl::window;

// Make a window go full-screen.
let sdl::enable_window_fullscreen(self: ^sdl::window) -> void;

// Take a window out of full-screen mode.
let sdl::disable_window_fullscreen(self: ^sdl::window) -> void;

// Save a screenshot of the window to the given filepath. Only
// works for *.bmp files.
let sdl::save(self: ^sdl::window, filepath: []i8) -> void;

// Create a default SDL2 color (RGBA).
let New(self: ^sdl::color) -> void
{
    self.r = 0u8;
    self.g = 0u8;
    self.b = 0u8;
    self.a = 0u8;
}

// Initialize an SDL2 color from a given 4-tuple of values.
let Copy(self: ^sdl::color, r: u8, g: u8, b: u8, a: u8
    ) -> ^sdl::color
{
    self.r = r;
    self.g = g;
    self.b = b;
    self.a = a;
    self
}

// Copy one pixel color into another.
let Copy(self: ^sdl::color, other: sdl::color
    ) -> ^sdl::color
{
    self.r = other.r;
    self.g = other.g;
    self.b = other.b;
    self.a = other.a;
    self
}

// Determine whether or not two colors are the same.
let Eq(l: sdl::color, r: sdl::color) -> bool
{
    if (l.r != r.r)
    {
        return false;
    }
    else if (l.g != r.g)
    {
        return false;
    }
    else if (l.b != r.b)
    {
        return false;
    }
    else if (l.a != r.a)
    {
        return false;
    }

    return true;
}

// Negation of the equality operator for colors.
let Neq(l: sdl::color, r: sdl::color) -> bool
{
    return Not(Eq(l, r));
}

// Create a new SDL2 coordinate. Begins at (0, 0) by default.
let New(self: ^sdl::coord) -> void
{
    self.x = to_u64(0);
    self.y = to_u64(0);
}

// Initialize an SDL2 coordinate from a 2-tuple.
let Copy(self: ^sdl::coord, x: u64, y: u64) -> ^sdl::coord
{
    self.x = x;
    self.y = y;
    self
}

// Copy one coordinate pair into another.
let Copy(self: ^sdl::coord, other: sdl::coord) -> ^sdl::coord
{
    self.x = other.x;
    self.y = other.y;
    self
}

// Initialize a default SDL2 rectangle to all zeros.
let New(self: ^sdl::rect) -> void
{
    self.x = 0u64;
    self.y = 0u64;
    self.w = 0u64;
    self.h = 0u64;
}

// Initialize an SDL2 rectangle from a 4-tuple.
let Copy(self: ^sdl::rect, x: u64, y: u64, w: u64, h: u64
    ) -> ^sdl::rect
{
    self.x = x;
    self.y = y;
    self.w = w;
    self.h = h;
    self
}

// Copy one SDL2 rectangle into another
let Copy(self: ^sdl::rect, other: sdl::rect) -> ^sdl::rect
{
    self.x = other.x;
    self.y = other.y;
    self.w = other.w;
    self.h = other.h;
    self
}

// Interfaces w/ the SDL2 trig functions.
let sdl::sin(x: f64) -> f64;
let sdl::cos(x: f64) -> f64;
let sdl::tan(x: f64) -> f64;

// Initialize the SDL2 backend.
let sdl::init() -> void;

// Shutdown the SDL2 backend.
let sdl::quit() -> void;

// Delay the given number of milliseconds.
let sdl::delay(ms: i32) -> void;

// Returns the number of clock ticks since SDL initialized.
let sdl::get_ticks() -> i32;

// Present the given window to the screen. If not called,
// nothing drawn on the window will update.
let show(window: ^sdl::window) -> void;

// Fill the window with the given color.
let fill(window: ^sdl::window, color: sdl::color) -> void;

// Draw a single pixel on the screen.
let draw_dot(window: ^sdl::window, point: sdl::coord,
    color: sdl::color) -> void;

// Draw a line on the screen between two points.
let draw_line(window: ^sdl::window, point_a: sdl::coord,
    point_b: sdl::coord, color: sdl::color) -> void;

// Draw a given rectangle on the screen.
let draw_rect(window: ^sdl::window, rect: sdl::rect,
    color: sdl::color) -> void;

////////////////////////////////////////////////////////////////
