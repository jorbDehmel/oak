// Basic SDL functionality testing 3
// Legacy passed

package!("std");
package!("sdl");

include!("std/printf.oak");

use_rule!("std");

let main() -> i32
{
    let black: sdl_color;
    let white: sdl_color;
    white = (255u8, 255u8, 255u8, 255u8);

    let w: u64 = 512u64;
    let h: u64 = 512u64;

    let wind: sdl_window;
    wind = (to_u64(w), to_u64(h));

    let event: sdl_event;
    let rect: sdl_rect;

    rect = (w / 2u64, h / 2u64, 8u64, 8u64);

    let start, end, elapsed: i32;
    let fps: f64;

    let running: bool = true;
    while running
    {
        start = sdl::get_ticks();

        // Clear screen
        wind.fill(black);

        wind.draw_rect(rect, white);

        // Present
        wind.show();

        // Poll events
        let flag_var: bool = true;
        while flag_var
        {
            event.wrap_sdl_none();
            event = sdl::poll_event();

            match event
            {
                case sdl::none()
                {
                    flag_var = false;
                }

                case sdl::key_down_event(data)
                {
                    if data.keycode == 27i128
                    {
                        running = false;
                    }
                }

                case sdl::mouse_move_event(data)
                {
                    rect.x = to_u64(to_i32(data.x));
                    rect.y = to_u64(to_i32(data.y));
                }

                case sdl::mouse_button_down_event(data)
                {
                    printf!(
                        "A mouse button was clicked w/ code %\n",
                        to_i32(data.code)
                    );
                }

                default {}
            }
        }

        end = sdl::get_ticks();
        elapsed = end - start;

        if elapsed < 32i32
        {
            sdl::delay(32i32 - elapsed);
        }
    }

    0i32
}
