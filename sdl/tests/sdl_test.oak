// For testing Oak's experimental SDL package
// Legacy passed
// Jordan Dehmel, 2023

package!("std");
use_rule!("std");

package!("sdl");
include!("std/time.oak");

let main() -> i32
{
    sdl::init();

    let wind: sdl_window;

    Copy(@wind, 512u64, 512u64);
    sdl::enable_window_fullscreen(wind);

    let black: sdl_color;
    let white: sdl_color;
    white.Copy(255u8, 255u8, 255u8, 255u8);

    let rect: sdl_rect;
    rect.Copy(10u64, 10u64, 10u64, 10u64);

    let y: i32 = 0i32;
    let frame: i32 = 0i32;
    let start_time: i64 = time();

    while (y < to_i32(wind.height))
    {
        let x: i32 = 0i32;

        while (x < to_i32(wind.width))
        {
            rect.x = to_u64(x);
            rect.y = to_u64(y);

            wind.fill(black);
            wind.draw_rect(rect, white);

            wind.show();
            ++frame;

            x += 10i32;
        }

        y += 10i32;

        let event: sdl_event;
        let flag_var: bool = true;
        while (flag_var)
        {
            event.wrap_sdl_none();
            event = sdl::poll_event();

            match (event)
            {
                case sdl::none()
                {
                    flag_var = false;
                }

                case sdl::key_down_event(data)
                {
                    let keycode: i128 = data.keycode;

                    print(sdl::keycode_to_str(keycode));
                    print("\n");
                }

                default {}
            }
        }
    }

    let end_time: i64 = time();

    let elapsed_s: i64 = end_time - start_time;

    sdl::disable_window_fullscreen(wind);
    wind.Del();
    sdl_quit();

    let fps: f64 = i_to_f(frame) / i_to_f(to_i32(elapsed_s));

    print("Frames: ");
    print(frame);
    print("\n");

    print("Elapsed seconds: ");
    print(to_i32(elapsed_s));
    print("\n");

    print("FPS: ");
    print(fps);
    print("\n");

    0i32
}
