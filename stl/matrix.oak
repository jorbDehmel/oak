////////////////////////////////////////////////////////////////

/*
A static sized 2D matrix for Oak. The 1D version can be found
in stl/arr.oak.

Jordan Dehmel, 2024
jdehmel@outlook.com
*/

package!("std");
include!("std/opt.oak");
include!("std/panic.oak");
include!("stl/arr.oak");
use_rule!("std");

////////////////////////////////////////////////////////////////

/*
A static 2-dimensional array structure. The `responsible` member
denotes whether or not this instance was responsible for
allocating the memory it holds. This is useful if the matrix was
instantiated as a pointer to memory it did not already own.
`Get` calls will throw panic!-s if they attempt to access out of
bounds data.
*/
let stl::matrix<t>: struct
{
    data: []t,
    w: u128,
    h: u128,
    responsible: bool,
}
pre
{
    Copy<t>(_: ^t, _: t);
}
post
{
    New<t>(_: ^stl::matrix<t>);
    Del<t>(_: ^stl::matrix<t>);

    Copy<t>(_: ^stl::matrix<t>, _: u128, _: u128);
    Copy<t>(_: ^stl::matrix<t>, _: stl::matrix<t>);
    Get<t>(_: ^stl::matrix<t>, _: u128, _: u128);

    get<t>(_: ^stl::matrix<t>, _: u128, _: u128);
    set<t>(_: ^stl::matrix<t>, _: u128, _: u128, _: t);
    row<t>(_: ^stl::matrix<t>, _: u128);
}

////////////////////////////////////////////////////////////////

let New<t>(self: ^stl::matrix<t>) -> void
{
    self.w = 0;
    self.h = 0;
    self.responsible = false;
}

let Del<t>(self: ^stl::matrix<t>) -> void
{
    if self.responsible && self.w != 0 && self.h != 0
    {
        let i: u128 = 0;
        while i < self.h * self.w
        {
            Del(Get(self.data, i));
            i += 1;
        }

        free!(self.data);
        self.responsible = false;
    }
}

let Copy<t>(self: ^stl::matrix<t>, w: u128, h: u128
    ) -> ^stl::matrix<t>
{
    assert!(w > 0u128);
    assert!(h > 0u128);

    Del(self);
    self.responsible = true;

    alloc!(self.data, w * h);

    let i: u128 = 0;
    while i < w * h
    {
        New(Get(self.data, i));
        i += 1;
    }

    self.w = w;
    self.h = h;

    self
}

let Copy<t>(self: ^stl::matrix<t>, other: stl::matrix<t>
    ) -> ^stl::matrix<t>
{
    self.responsible = other.responsible;

    if self.responsible
    {
        // Deep copy

        self = (other.w, other.h);

        let y: u128 = 0;
        while y < self.h
        {
            let x: u128 = 0;
            while x < self.w
            {
                Get(self.data, (y * self.w) + x)
                    = Get(other.data, (y * self.w) + x);
                x += 1;
            }
            y += 1;
        }
    }
    else
    {
        // Shallow copy

        self.w = other.w;
        self.h = other.h;
        ptrcpy!(self.data, other.data);
    }

    self
}

let Get<t>(self: ^stl::matrix<t>, x: u128, y: u128) -> t
{
    assert!(x < self.w);
    assert!(y < self.h);

    Get(self.data, (self.w * y) + x)
}

let get<t>(self: ^stl::matrix<t>, x: u128, y: u128) -> t
{
    assert!(x < self.w);
    assert!(y < self.h);

    Get(self.data, (self.w * y) + x)
}

let set<t>(self: ^stl::matrix<t>, x: u128, y: u128, from: t
    ) -> void
{
    assert!(x < self.w);
    assert!(y < self.h);

    Get(self.data, (self.w * y) + x) = from;
}

let row<t>(self: ^stl::matrix<t>, r: u128) -> stl::arr<t>
{
    assert!(r < self.h);

    let out: stl::arr<t>;
    out.l = self.w;
    ptrcpy!(out.data, @Get(self.data, r * self.w));
    out.responsible = false;

    out
}

////////////////////////////////////////////////////////////////
