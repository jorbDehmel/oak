////////////////////////////////////////////////////////////////

/*
Uses linear probing. Requires a hash function on the key.

Jordan Dehmel, 2023
jdehmel@outlook.com
*/

////////////////////////////////////////////////////////////////

package!("std");
use_rule!("std");

include!("std/opt.oak");
include!("std/panic.oak");

////////////////////////////////////////////////////////////////

let stl::set_node<k>: struct
{
    state: u8,  // 0 = unoccupied, 1 = occupied, 2 = erased
    key: k,
    hash: u128,
}
pre
{
    hash<k>(_: k);
    Eq<k>(_: k, _: k);
}
post
{
    New<k>(_: ^stl::set_node<k>);
    Copy<k>(_: ^stl::set_node<k>, _: k);
    erase<k>(_: ^stl::set_node<k>);
}

////////////////////////////////////////////////////////////////

let New<k>(self: ^stl::set_node<k>) -> void
{
    self.state = 0u8;
}

let Copy<k>(self: ^stl::set_node<k>, key: k
    ) -> ^stl::set_node<k>
{
    self.key = key;
    self.hash = hash(self.key);
    self.state = 1u8;

    self
}

let erase<k>(self: ^stl::set_node<k>) -> void
{
    self.state = 2u8;
}

////////////////////////////////////////////////////////////////

let stl::set::default_size! = 128;
let stl::set::max_alpha! = 0.5;

let stl::set<k>: struct
{
    data: []stl::set_node<k>,
    size: u128,
    occupied: u128,
    alpha: f64,
}
pre
{
    stl::set_node<k>;
    hash<k>(_: k);
    Eq<k>(_: k, _: k);
}
post
{
    New<k>(_: ^stl::set<k>);
    Del<k>(_: ^stl::set<k>);

    expand<k>(_: ^stl::set<k>);

    insert<k>(_: ^stl::set<k>, _: k);
    has<k>(_: ^stl::set<k>, _: k);
    erase<k>(_: stl::set<k>, _: k);
}

////////////////////////////////////////////////////////////////

let New<k>(self: ^stl::set<k>) -> void
{
    self.size = stl::set::default_size!;
    self.alpha = 0.0;
    self.occupied = 0;

    alloc!(self.data, self.size);

    let i: i32 = 0;
    while i < self.size
    {
        New(ptrarr!(self.data, i));
        i += 1;
    }
}

let Del<k>(self: ^stl::set<k>) -> void
{
    free!(self.data);
}

let has<k>(self: ^stl::set<k>, key: k) -> bool
{
    // Create vars
    let h: u128;
    let i: u128;
    let sentinel: bool;
    let cur: ^stl::set_node<k>;

    h = hash(key);
    sentinel = true;

    // Get initial guess
    i = h % self.size;

    // Continue until found or empty
    while sentinel
    {
        // Get
        ptrcpy!(cur, @ptrarr!(self.data, i));

        // If empty, break
        if cur.state == 0
        {
            sentinel = false;
        }

        // Skip tombstone nodes
        else if cur.state == 2
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }

        // Else if found, wrap answer and break
        if cur.key == key
        {
            if cur.state == 1
            {
                return true;
            }
        }

        // Else, advance
        else
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }
    }

    return false;
}

let insert<k>(self: ^stl::set<k>, key: k) -> void
{
    // Create vars
    let h: u128;
    let i: u128;
    let sentinel: bool;
    let cur: ^stl::set_node<k>;

    h = hash(key);
    sentinel = true;

    // Get initial guess
    i = h % self.size;

    // Continue until found or empty
    while sentinel
    {
        // Get
        ptrcpy!(cur, @ptrarr!(self.data, i));

        // If empty, break
        if cur.state == 0
        {
            cur = key;

            // Update occupancy ratio
            self.occupied += 1;
            self.alpha = to_f64(to_i32(self.occupied));
            self.alpha /= to_f64(to_i32(self.size));

            // Expand if need be
            while self.alpha > stl::set::max_alpha!
            {
                expand(self);
            }

            sentinel = false;
        }

        // Skip tombstone nodes
        else if cur.state == 2
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }

        // Else if found, wrap answer and break
        if cur.key == key
        {
            if cur.state == 1
            {
                sentinel = false;
            }
        }

        // Else, advance
        else
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }
    }
}

let erase<k>(self: stl::set<k>, key: k) -> void
{
    // Create vars
    let h: u128;
    let i: u128;
    let sentinel: bool;
    let cur: ^stl::set_node<k>;

    h = hash(key);
    sentinel = true;

    // Get initial guess
    i = h % self.size;

    // Continue until found or empty
    while sentinel
    {
        // Get
        ptrcpy!(cur, @ptrarr!(self.data, i));

        // If empty, break
        if cur.state == 0
        {
            sentinel = false;
        }

        // Skip tombstone nodes
        else if cur.state == 2
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }

        // Else if found, wrap answer and break
        if cur.key == key
        {
            if cur.state == 1
            {
                cur.erase();
                sentinel = false;
            }
        }

        // Else, advance
        else
        {
            i += 1;
            if i > self.size
            {
                i %= self.size;
            }
        }
    }
}

/*
Doubles in size
*/
let expand<k>(self: ^stl::set<k>) -> void
{
    // Create new
    let old_data: []stl::set_node<k>;
    let old_size: u128;
    let i: u128;

    let cur: ^stl::set_node<k>;

    old_size = self.size;
    ptrcpy!(old_data, self.data);

    self.size *= 2;

    alloc!(self.data, self.size);

    self.occupied = 0;
    self.alpha = 0.0;

    // Copy from old to new
    while i < old_size
    {
        ptrcpy!(cur, @ptrarr!(old_data, i));

        if (cur.state == 1)
        {
            // Source code copied from set
            let key = cur.key;

            // Create vars
            let h: u128;
            let cur_key: u128;
            let sentinel: bool;
            let cur: ^stl::set_node<k>;

            h = hash(key);
            sentinel = true;

            // Get initial guess
            cur_key = h % self.size;

            // Continue until found or empty
            while sentinel
            {
                // Get
                ptrcpy!(cur, @ptrarr!(self.data, cur_key));

                // If found
                if cur.key == key
                {
                    sentinel = false;
                }

                // Else if empty, break
                else if cur.hash == 0u128
                {
                    cur = key;

                    // Update occupancy ratio
                    self.occupied += 1;
                    self.alpha = to_f64(to_i32(self.occupied));
                    self.alpha /= to_f64(to_i32(self.size));

                    sentinel = false;
                }

                // Else, advance
                else
                {
                    cur_key += 1;
                    if cur_key >= self.size
                    {
                        cur_key %= self.size;
                    }
                }
            }
        }

        i += 1;
    }

    // Delete old
    free!(old_data);
}

////////////////////////////////////////////////////////////////
