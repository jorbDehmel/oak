////////////////////////////////////////////////////////////////

/*
A static sized 1D arr for Oak. The 2D version can be found
in stl/matrix.oak.

Jordan Dehmel, 2024
jdehmel@outlook.com
*/

package!("std");
include!("std/opt.oak");
include!("std/panic.oak");
use_rule!("std");

////////////////////////////////////////////////////////////////

/*
A static 1-dimensional array structure. The `responsible` member
denotes whether or not this instance was responsible for
allocating the memory it holds. This is useful if the array was
instantiated as a pointer to memory it did not already own.
`Get` calls will throw panic!-s if they attempt to access out of
bounds data.
*/
let stl::arr<t>: struct
{
    data: []t,
    l: u128,
    responsible: bool,
}
pre
{
    Copy<t>(_: ^t, _: t);
}
post
{
    New<t>(_: ^stl::arr<t>);
    Del<t>(_: ^stl::arr<t>);

    Copy<t>(_: ^stl::arr<t>, _: u128);
    Copy<t>(_: ^stl::arr<t>, _: stl::arr<t>);
    Get<t>(_: ^stl::arr<t>, _: u128);

    get<t>(_: ^stl::arr<t>, _: u128);
    set<t>(_: ^stl::arr<t>, _: u128, _: t);
}

////////////////////////////////////////////////////////////////

let New<t>(self: ^stl::arr<t>) -> void
{
    self.l = 0;
    self.responsible = false;
}

let Del<t>(self: ^stl::arr<t>) -> void
{
    if self.responsible && self.l != 0
    {
        let i: u128 = 0;
        while i < self.l
        {
            Del(Get(self.data, i));
            i += 1;
        }

        free!(self.data);
        self.responsible = false;
    }
}

let Copy<t>(self: ^stl::arr<t>, l: u128) -> void
{
    assert!(l > to_u128(0));

    Del(self);
    self.responsible = true;

    alloc!(self.data, l);

    let i: u128 = 0;
    while i < l
    {
        New(Get(self.data, i));
        i += 1;
    }

    self.l = l;
}

let Copy<t>(self: ^stl::arr<t>, other: stl::arr<t>) -> void
{
    self.responsible = other.responsible;

    if self.responsible
    {
        // Deep copy

        self = other.l;
        let i: u128 = 0;
        while i < self.l
        {
            Get(self.data, i) = Get(other.data, i);
        }
    }
    else
    {
        // Shallow copy

        self.l = other.l;
        ptrcpy!(self.data, other.data);
    }
}

let Get<t>(self: ^stl::arr<t>, x: u128) -> t
{
    assert!(x < self.l);
    Get(self.data, x)
}

let get<t>(self: ^stl::arr<t>, x: u128) -> t
{
    assert!(x < self.l);
    Get(self.data, x)
}

let set<t>(self: ^stl::arr<t>, x: u128, from: t) -> void
{
    assert!(x < self.l);
    Get(self.data, x) = from;
}

////////////////////////////////////////////////////////////////

/*
Trait which defines some extra math functions for a stl::arr.
These are not viable functions for non-numerical types, so they
are not included in the standard stl::arr.
*/
let stl::math_arr<t>: trait
{
    Add<t>(_: t, _: t);
    Sub<t>(_: t, _: t);
    Mult<t>(_: t, _: t);
}
post
{
    Mult<t>(_: ^stl::arr<t>, _: stl::arr<t>);
    sum<t>(_: ^stl::arr<t>);
    partial_sums<t>(_: ^stl::arr<t>);
    diff<t>(_: ^stl::arr<t>);
}

////////////////////////////////////////////////////////////////

/*
Return the dot product of two arrays.
*/
let Mult<t>(self: ^stl::arr<t>, other: stl::arr<t>) -> t
{
    assert!(self.l == other.l);

    let out: t;
    let i: u128 = 0;
    while i < self.l
    {
        out += self.get(i) * other.get(i);

        i += 1;
    }

    out
}

/*
Return the sum of the array.
*/
let sum<t>(self: ^stl::arr<t>) -> t
{
    let out: t;
    let i: u128 = 0;
    while i < self.l
    {
        out += self.get(i);
        i += 1;
    }

    out
}

/*
Return the partial sums of the array.
*/
let partial_sums<t>(self: ^stl::arr<t>) -> stl::arr<t>
{
    // Set everything up
    assert!(self.l > 0);
    let out: stl::arr<t>;
    out = self.l;

    // Initialize w/ default value for t (probably 0)
    let sum: t;

    // Iterate over items in self.data, create sum array
    for (let i: u128 = 0; i < self.l; i += 1)
    {
        sum += Get(self.data, i);
        out.set(i, sum);
    }

    out
}

/*
For all i where i + 1 < out.l:
out.diff[i] = out[i + 1] - out[i]
*/
let diff<t>(self: ^stl::arr<t>) -> stl::arr<t>
{
    assert!(self.l > 0);
    let out: stl::arr<t>;

    // Allocate correct size
    out = (self.l - 1);

    // Create values
    let i: u128 = 0;
    while i < out.l
    {
        out.set(i, self.get(i + 1) - self.get(i));
        i += 1;
    }

    out
}

////////////////////////////////////////////////////////////////
