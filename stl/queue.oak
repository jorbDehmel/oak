////////////////////////////////////////////////////////////////

/*
A generic queue using a singly linked list for Oak.

Jordan Dehmel, 2023
jdehmel@outlook.com
*/

////////////////////////////////////////////////////////////////

package!("std");
use_rule!("std");

include!("std/opt.oak");
include!("stl/ptrcmp.oak");

////////////////////////////////////////////////////////////////

// A singly linked node, for use in a queue.
let stl::queue_node<t>: struct
{
    data: t,                    // The item in the current node
    next: ^stl::queue_node<t>,  // The next node in the list
}
post
{
    to_void_ptr<stl::queue_node<t>>(_: ^stl::queue_node<t>);
    New<t>(_: ^stl::queue_node<t>);
    Del<t>(_: ^stl::queue_node<t>);
}

////////////////////////////////////////////////////////////////

// Create a new, empty, queue node.
let New<t>(self: ^stl::queue_node<t>) -> void
{
    New(self.data);
    ptrcpy!(self.next, 0u128);
}

// If this is not the last node, free all remaining nodes.
let Del<t>(self: ^stl::queue_node<t>) -> void
{
    if (to_void_ptr(self.next) != 0u128)
    {
        Del(self.next);
        free!(self.next);
    }

    Del(self.data);
}

////////////////////////////////////////////////////////////////

// A queue, composed on dynamically allocated queue nodes.
// First in, last out. NOT random access.
let stl::queue<t>: struct
{
    head: ^stl::queue_node<t>,
    tail: ^stl::queue_node<t>,
    size: u128,
}
pre
{
    opt<t>;
    stl::queue_node<t>;
}
post
{
    to_void_ptr<stl::queue_node<t>>(_: ^stl::queue_node<t>);
    Del<t>(_: ^stl::queue<t>);

    front<t>(_: ^stl::queue<t>);

    pop_front<t>(_: ^stl::queue<t>);
    append<t>(_: ^stl::queue<t>, _: t);

    pop<t>(_: ^stl::queue<t>);
    push<t>(_: ^stl::queue<t>, _: t);

    empty<t>(_: ^stl::queue<t>);
}

////////////////////////////////////////////////////////////////

// Collapse a queue.
let Del<t>(self: ^stl::queue<t>) -> void
{
    if (to_void_ptr(self.head) != 0u128)
    {
        Del(self.head);
        free!(self.head);

        ptrcpy!(self.head, 0u128);
        ptrcpy!(self.tail, 0u128);
        self.size = 0u128;
    }
}

// Get the front of the queue.
let front<t>(self: ^stl::queue<t>) -> opt<t>
{
    let out: opt<t>;
    out.wrap_none();

    if (to_void_ptr(self.head) != 0u128)
    {
        out.wrap_some(self.head.data);
    }

    return out;
}

// Delete the front of the list.
let pop_front<t>(self: ^stl::queue<t>) -> void
{
    let old: ^stl::queue_node<t>;
    ptrcpy!(old, self.head);
    ptrcpy!(self.head, self.head.next);

    ptrcpy!(old.next, 0u128);
    Del(old);
    free!(old);
}

// Add some item to the queue.
let append<t>(self: ^stl::queue<t>, what: t) -> void
{
    if (to_void_ptr(self.head) == 0u128)
    {
        alloc!(self.head);
        ptrcpy!(self.tail, self.head);

        New(self.head);
        self.head.data = what;
    }
    else
    {
        alloc!(self.tail.next);
        ptrcpy!(self.tail, self.tail.next);

        New(self.tail);
        self.tail.data = what;
    }
}

// Pop the front of the queue.
let pop<t>(self: ^stl::queue<t>) -> void
{
    pop_front(self);
}

// Add some item onto the queue.
let push<t>(self: ^stl::queue<t>, what: t) -> void
{
    append(self, what);
}

// Returns true if the queue is empty, false otherwise.
let empty<t>(self: ^stl::queue<t>) -> bool
{
    if (is_null(to_void_ptr(self.head)))
    {
        return true;
    }
    return false;
}

////////////////////////////////////////////////////////////////
