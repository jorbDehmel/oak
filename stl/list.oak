////////////////////////////////////////////////////////////////

/*
A generic doubly linked list for Oak.

Jordan Dehmel, 2023
jdehmel@outlook.com
*/

////////////////////////////////////////////////////////////////

package!("std");
use_rule!("std");

include!("std/opt.oak");
include!("stl/ptrcmp.oak");

////////////////////////////////////////////////////////////////

// A single node in a list. This is doubly linked.
let stl::list_node<t>: struct
{
    data: t,                  // The data stored at this node
    next: ^stl::list_node<t>, // The next node in the list
    prev: ^stl::list_node<t>, // The previous node in the list
}
post
{
    // Used for checking if the next and previous are null
    to_void_ptr<stl::list_node<t>>(_: ^stl::list_node<t>);

    New<t>(_: ^stl::list_node<t>);
    Del<t>(_: ^stl::list_node<t>);
}

////////////////////////////////////////////////////////////////

// Create a new node, with both the next and the prev being
// null.
let New<t>(self: ^stl::list_node<t>) -> void
{
    ptrcpy!(self.next, 0u128);
    ptrcpy!(self.prev, 0u128);
}

// Delete the current node. If the next node is not null, then
// delete it as well. This will cause a cascade which will
// delete all the nodes in the list. Note that it does not call
// the destructor on prev.
let Del<t>(self: ^stl::list_node<t>) -> void
{
    if (to_void_ptr(self.next) != 0u128)
    {
        Del(self.next);
        free!(self.next);
    }
}

////////////////////////////////////////////////////////////////

// A generic doubly-linked list. Essentially a `dequeue`.
// All operations detailed here require only constant time.
let stl::list<t>: struct
{
    head: ^stl::list_node<t>, // The first node, or null
    tail: ^stl::list_node<t>, // The last node, or null
    size: u128,               // The number of nodes
}
pre
{
    opt<t>;
    stl::list_node<t>;
}
post
{
    to_void_ptr<stl::list_node<t>>(_: ^stl::list_node<t>);
    Del<t>(_: ^stl::list<t>);

    front<t>(_: ^stl::list<t>);
    back<t>(_: ^stl::list<t>);

    pop_front<t>(_: ^stl::list<t>);
    pop_back<t>(_: ^stl::list<t>);

    append<t>(_: ^stl::list<t>, _: t);
    prepend<t>(_: ^stl::list<t>, _: t);

    erase<t>(_: ^stl::list<t>, _: ^stl::list_node<t>);
}

////////////////////////////////////////////////////////////////

// Delete the first node, causing a cascade which will free all
// dynamically allocated memory.
let Del<t>(self: ^stl::list<t>) -> void
{
    if (to_void_ptr(self.head) != 0u128)
    {
        Del(self.head);
        free!(self.head);

        ptrcpy!(self.head, 0u128);
        ptrcpy!(self.tail, 0u128);
        self.size = 0u128;
    }
}

// Get the first item from the list if there is one.
let front<t>(self: ^stl::list<t>) -> opt<t>
{
    let out: opt<t>;
    out.wrap_none();

    if (to_void_ptr(self.head) != 0u128)
    {
        out.wrap_some(self.head.data);
    }

    return out;
}

// Get the last item of the list if there is one.
let back<t>(self: ^stl::list<t>) -> opt<t>
{
    let out: opt<t>;
    out.wrap_none();

    if (to_void_ptr(self.tail) != 0u128)
    {
        out.wrap_some(self.tail.data);
    }

    return out;
}

// Erase the first item in the list.
let pop_front<t>(self: ^stl::list<t>) -> void
{
    let old: ^stl::list_node<t>;
    ptrcpy!(old, self.head);
    ptrcpy!(self.head, self.head.next);
    ptrcpy!(self.head.prev, 0u128);
    ptrcpy!(old.next, 0u128);

    Del(old);
}

// Erase the last item in the list.
let pop_back<t>(self: ^stl::list<t>) -> void
{
    let old: ^stl::list_node<t>;
    ptrcpy!(old, self.tail);
    ptrcpy!(self.tail, self.tail.prev);
    ptrcpy!(self.tail.next, 0u128);
    Del(old);
}

// Push an item onto the end of the list.
let append<t>(self: ^stl::list<t>, what: t) -> void
{
    if (to_void_ptr(self.head) == 0u128)
    {
        alloc!(self.head);
        ptrcpy!(self.tail, self.head);
        self.head.data = what;
    }
    else
    {
        alloc!(self.tail.next);
        ptrcpy!(self.tail.next.prev, self.tail);
        ptrcpy!(self.tail, self.tail.next);
        self.tail.data = what;
    }
}

// Push an item onto the front of the list.
let prepend<t>(self: ^stl::list<t>, what: t) -> void
{
    if (to_void_ptr(self.head) == 0u128)
    {
        alloc!(self.head);
        ptrcpy!(self.tail, self.head);
        self.head.data = what;
    }
    else
    {
        alloc!(self.head.prev);
        ptrcpy!(self.head, self.head.prev);
        ptrcpy!(self.head.prev.next, self.head);
        self.head.data = what;
    }
}

// Erase the given node. This will most likely come from some
// sort of iteration along the list.
let erase<t>(self: ^stl::list<t>, what: ^stl::list_node<t>
    ) -> void
{
    Eq<stl::list_node<t>>(
        _: ^stl::list_node<t>,
        _: ^stl::list_node<t>);

    if self.head == what
    {
        self.pop_front();
    }
    else if self.tail == what
    {
        self.pop_back();
    }
    else
    {
        ptrcpy!(what.prev.next, what.next);
        ptrcpy!(what.next.prev, what.prev);
        ptrcpy!(what.next, 0u128);
        ptrcpy!(what.prev, 0u128);

        Del(what);
        free!(what);

        ptrcpy!(what, 0u128);
    }
}

////////////////////////////////////////////////////////////////
