package!("std");
use_rule!("std");

include "std/panic.oak",
    "std/file.oak",
    "std/string.oak",
    "std/printf.oak",
    "std/color.oak";

include "extra/regex.oak";

include "std/bool.oak";
use "bool";

let main(argc: i32, argv: ^str) -> i32
{
    // If argc != 3, panic w/ the given message.
    assert!(
        argc == 3,
        "Please provide exactly 3 command line arguments."
    );

    // Get the command line arguments
    let filepath: string = ptrarr!(argv, 1);
    let pattern: string = ptrarr!(argv, 2);
    
    let pattern_reg: extra::regex;
    pattern_reg = pattern;

    let num_matches = 0;

    // Open filepath
    let file: i_file;
    let line: string;
    file.open(filepath.c_str());

    while not file.eof()
    {
        line = file.getline(to_u128(512));

        if extra::regex_search(line, pattern_reg)
        {
            print(line.green());
            num_matches += 1;
        }
    }

    file.close();

    print("\n");

    if num_matches == 0
    {   
        print("No matches!\n".red());
    }
    else
    {
        begin_green_bold();
        printf!("% lines matched.\n", num_matches);
        end_effects();
    }

    0
}
